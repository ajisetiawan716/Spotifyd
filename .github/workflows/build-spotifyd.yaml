name: build-spotifyd-openwrt-standalone

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - '.github/workflows/build-spotifyd.yaml'

jobs:
  build:
    name: build (${{ matrix.target }})
    runs-on: ubuntu-22.04
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64
            arch: x86_64
            toolchain_url: https://downloads.openwrt.org/releases/23.05.5/targets/x86/64/openwrt-sdk-23.05.5-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz
            toolchain_dir: toolchain-x86_64_gcc-12.3.0_musl
          - target: aarch64_cortex-a53
            arch: aarch64_cortex-a53
            toolchain_url: https://downloads.openwrt.org/releases/23.05.5/targets/mediatek/filogic/openwrt-sdk-23.05.5-mediatek-filogic_gcc-12.3.0_musl.Linux-x86_64.tar.xz
            toolchain_dir: toolchain-aarch64_cortex-a53_gcc-12.3.0_musl

    steps:
      - name: Checkout spotifyd source
        uses: actions/checkout@v4
        with:
          repository: Spotifyd/spotifyd
          ref: v0.4.1
          path: spotifyd-src

      - name: Apply librespot patch
        run: |
          set -eux
          cd spotifyd-src
          
          # Apply librespot patch
          sed -i '/^\[patch.crates-io\]/,/^$/d' Cargo.toml
          echo '[patch.crates-io]' >> Cargo.toml
          echo 'librespot = { git = "https://github.com/librespot-org/librespot.git", rev = "be37402" }' >> Cargo.toml
          
          echo "✅ Librespot patch applied"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential git curl wget \
            xz-utils tar python3 python3-distutils \
            libncurses-dev unzip rsync gawk gettext \
            musl-tools pkg-config libssl-dev \
            libasound2-dev libportaudio2 portaudio19-dev

      - name: Install Rust toolchain
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          source $HOME/.cargo/env
          rustc --version
          cargo --version

      - name: Download OpenWRT toolchain only
        run: |
          set -eux
          echo "Downloading toolchain for ${{ matrix.target }}..."
          echo "URL: ${{ matrix.toolchain_url }}"
          
          # Download toolchain
          curl -fsSL "${{ matrix.toolchain_url }}" -o toolchain.tar.xz
          
          # Extract entire SDK first to see structure
          mkdir -p /tmp/sdk-extract
          tar -xf toolchain.tar.xz -C /tmp/sdk-extract
          
          # Find the actual toolchain directory
          SDK_DIR=$(find /tmp/sdk-extract -name "openwrt-sdk-*" -type d | head -1)
          if [ -z "$SDK_DIR" ]; then
            echo "❌ Could not find SDK directory"
            ls -la /tmp/sdk-extract/
            exit 1
          fi
          
          echo "SDK found at: $SDK_DIR"
          
          # Set toolchain directory
          export TOOLCHAIN_DIR="$SDK_DIR/staging_dir/${{ matrix.toolchain_dir }}"
          echo "TOOLCHAIN_DIR=$TOOLCHAIN_DIR" >> $GITHUB_ENV
          echo "SDK_DIR=$SDK_DIR" >> $GITHUB_ENV
          
          echo "Toolchain directory: $TOOLCHAIN_DIR"
          ls -la "$TOOLCHAIN_DIR/bin/" || echo "Toolchain bin not found, checking alternative locations..."
          
          # Check alternative paths
          find "$SDK_DIR/staging_dir" -name "*gcc" -type f | head -5 || echo "No compiler found"

      - name: Setup cross-compilation environment
        run: |
          set -eux
          
          echo "Setting up cross-compilation for ${{ matrix.target }}"
          echo "Toolchain directory: $TOOLCHAIN_DIR"
          
          # Find the actual compiler paths
          CC=$(find "$TOOLCHAIN_DIR/bin" -name "*-gcc" | head -1)
          AR=$(find "$TOOLCHAIN_DIR/bin" -name "*-ar" | head -1)
          STRIP=$(find "$TOOLCHAIN_DIR/bin" -name "*-strip" | head -1)
          
          if [ -z "$CC" ] || [ -z "$AR" ]; then
            echo "❌ Could not find compiler tools"
            echo "Looking in: $TOOLCHAIN_DIR/bin/"
            ls -la "$TOOLCHAIN_DIR/bin/" || echo "Directory not found"
            exit 1
          fi
          
          echo "Found CC: $CC"
          echo "Found AR: $AR"
          echo "Found STRIP: $STRIP"
          
          if [ "${{ matrix.target }}" = "x86_64" ]; then
            export CARGO_TARGET=x86_64-unknown-linux-musl
          else
            export CARGO_TARGET=aarch64-unknown-linux-musl
          fi
          
          rustup target add $CARGO_TARGET
          
          echo "CC=$CC" >> $GITHUB_ENV
          echo "AR=$AR" >> $GITHUB_ENV
          echo "STRIP=$STRIP" >> $GITHUB_ENV
          echo "CARGO_TARGET=$CARGO_TARGET" >> $GITHUB_ENV

      - name: Setup pkg-config untuk cross-compilation
        run: |
          set -eux
          echo "Setting up pkg-config for cross-compilation..."
          
          # Setup pkg-config environment variables
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=$TOOLCHAIN_DIR" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$TOOLCHAIN_DIR/usr/lib/pkgconfig:$TOOLCHAIN_DIR/lib/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_LIBDIR=$TOOLCHAIN_DIR/usr/lib/pkgconfig:$TOOLCHAIN_DIR/lib/pkgconfig" >> $GITHUB_ENV
          
          echo "PKG_CONFIG_ALLOW_CROSS=1"
          echo "PKG_CONFIG_SYSROOT_DIR=$TOOLCHAIN_DIR"
          echo "PKG_CONFIG_PATH=$TOOLCHAIN_DIR/usr/lib/pkgconfig:$TOOLCHAIN_DIR/lib/pkgconfig"

      - name: Verify toolchain structure
        run: |
          set -eux
          echo "=== TOOLCHAIN STRUCTURE ==="
          echo "Toolchain dir: $TOOLCHAIN_DIR"
          ls -la "$TOOLCHAIN_DIR/" || echo "Toolchain directory not found"
          
          echo "=== LIBRARY PATHS ==="
          find "$TOOLCHAIN_DIR" -name "*.pc" -o -name "libasound*" | head -10 || echo "No library files found"
          
          echo "=== PKG-CONFIG FILES ==="
          find "$TOOLCHAIN_DIR" -path "*/pkgconfig/*" -name "*.pc" | head -5 || echo "No pkg-config files found"

      - name: Build spotifyd standalone
        run: |
          set -eux
          cd spotifyd-src
          
          echo "Building with:"
          echo "CC: $CC"
          echo "AR: $AR"
          echo "Target: $CARGO_TARGET"
          echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
          echo "PKG_CONFIG_SYSROOT_DIR: $PKG_CONFIG_SYSROOT_DIR"
          
          # Build dengan cross-compilation
          CARGO_HOME="$HOME/.cargo" \
          RUSTFLAGS="-C linker=$CC -C ar=$AR -C target-feature=+crt-static" \
          PKG_CONFIG_ALLOW_CROSS=1 \
          PKG_CONFIG_SYSROOT_DIR="$TOOLCHAIN_DIR" \
          PKG_CONFIG_PATH="$TOOLCHAIN_DIR/usr/lib/pkgconfig:$TOOLCHAIN_DIR/lib/pkgconfig" \
          PKG_CONFIG_LIBDIR="$TOOLCHAIN_DIR/usr/lib/pkgconfig:$TOOLCHAIN_DIR/lib/pkgconfig" \
          cargo build \
            --release \
            --no-default-features \
            --features alsa_backend \
            --target $CARGO_TARGET
          
          # Strip binary untuk mengurangi size
          $STRIP target/$CARGO_TARGET/release/spotifyd

      - name: Fallback build dengan portaudio (jika ALSA gagal)
        if: failure()
        run: |
          set -eux
          cd spotifyd-src
          
          echo "ALSA build failed, trying with portaudio backend..."
          
          # Clean previous build
          cargo clean
          
          # Build dengan portaudio backend
          CARGO_HOME="$HOME/.cargo" \
          RUSTFLAGS="-C linker=$CC -C ar=$AR -C target-feature=+crt-static" \
          cargo build \
            --release \
            --no-default-features \
            --features portaudio_backend \
            --target $CARGO_TARGET
          
          # Strip binary untuk mengurangi size
          $STRIP target/$CARGO_TARGET/release/spotifyd

      - name: Create OpenWRT package
        run: |
          set -eux
          mkdir -p spotifyd-ng_control
          
          # Create control file tanpa heredocs
          echo "Package: spotifyd-ng" > spotifyd-ng_control/control
          echo "Version: 0.4.1-1" >> spotifyd-ng_control/control
          echo "Depends: libc, alsa-lib, libstdcpp, libpthread" >> spotifyd-ng_control/control
          echo "Source: https://github.com/Spotifyd/spotifyd" >> spotifyd-ng_control/control
          echo "Section: sound" >> spotifyd-ng_control/control
          echo "Category: Sound" >> spotifyd-ng_control/control
          echo "Title: Spotify daemon" >> spotifyd-ng_control/control
          echo "Maintainer: Build Bot <noreply@github.com>" >> spotifyd-ng_control/control
          echo "Architecture: ${{ matrix.arch }}" >> spotifyd-ng_control/control
          echo "Description: A spotify playing daemon for OpenWrt." >> spotifyd-ng_control/control
          
          # Create package structure
          mkdir -p spotifyd-ng_{data,ipk}
          mkdir -p spotifyd-ng_data/usr/bin
          
          # Copy binary
          cp spotifyd-src/target/$CARGO_TARGET/release/spotifyd spotifyd-ng_data/usr/bin/
          chmod +x spotifyd-ng_data/usr/bin/spotifyd
          
          # Create IPK package
          cd spotifyd-ng_data && tar -czf ../data.tar.gz . && cd ..
          cd spotifyd-ng_control && tar -czf ../control.tar.gz . && cd ..
          echo "2.0" > debian-binary
          
          # Create final IPK
          tar -czf spotifyd-ng_${{ matrix.arch }}.ipk ./debian-binary ./data.tar.gz ./control.tar.gz
          
          # Create output directory
          mkdir -p output/${{ matrix.target }}
          mv spotifyd-ng_${{ matrix.arch }}.ipk output/${{ matrix.target }}/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: spotifyd-${{ matrix.target }}-ipk
          path: output/${{ matrix.target }}/
          if-no-files-found: error

      - name: Verify package
        run: |
          echo "=== PACKAGE VERIFICATION ==="
          echo "Binary info:"
          file spotifyd-src/target/$CARGO_TARGET/release/spotifyd
          echo "Package contents:"
          tar -ztvf output/${{ matrix.target }}/*.ipk || echo "Package not found"