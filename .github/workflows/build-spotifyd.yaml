name: build-spotifyd

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - "package/**"
      - ".github/workflows/build-spotifyd.yaml"

jobs:
  build:
    name: "build (${{ matrix.target }} | ${{ matrix.pretty }})"
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64
            pretty: x86-64
            sdk: "https://downloads.openwrt.org/releases/23.05.5/targets/x86/64/openwrt-sdk-23.05.5-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
          - target: aarch64_generic
            pretty: mediatek-filogic
            sdk: "https://downloads.openwrt.org/releases/23.05.5/targets/mediatek/filogic/openwrt-sdk-23.05.5-mediatek-filogic_gcc-12.3.0_musl.Linux-x86_64.tar.xz"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: System deps (ALSA, OpenSSL, tools)
        shell: bash
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential clang llvm patch xz-utils tar gzip bzip2 unzip \
            rsync git python3 gawk wget curl ca-certificates \
            pkg-config libasound2-dev libssl-dev zlib1g-dev cmake perl \
            dos2unix

      - name: Rust toolchain (host)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.82.0

      - name: Download & unpack OpenWrt SDK
        shell: bash
        run: |
          set -eux
          mkdir -p "$GITHUB_WORKSPACE/_sdk"
          cd "$GITHUB_WORKSPACE/_sdk"
          wget -O sdk.tar.xz "${{ matrix.sdk }}"
          tar -xJf sdk.tar.xz
          SDK_DIR="$(echo "$GITHUB_WORKSPACE/_sdk"/openwrt-sdk-*)"
          echo "SDK_DIR=$SDK_DIR" >> "$GITHUB_ENV"

      - name: Prepare package tree (copy your package + patches)
        shell: bash
        run: |
          set -eux
          rsync -a --delete "package/" "$SDK_DIR/package/"

          # Pastikan patch ada di packages (BUKAN src)
          test -d "$SDK_DIR/package/sound/spotifyd-ng/patches"
          ls -la "$SDK_DIR/package/sound/spotifyd-ng/patches"

          # Rapikan EOL Makefile (hindari error LF)
          if [ -f "$SDK_DIR/package/sound/spotifyd-ng/Makefile" ]; then
            dos2unix "$SDK_DIR/package/sound/spotifyd-ng/Makefile" || true
          fi

      # ⚠️ Tidak ada langkah feeds/update/install — sesuai permintaan:
      # build langsung paket spotifyd-ng di dalam SDK

      - name: Build package (patches applied during prepare)
        shell: bash
        run: |
          set -eux
          cd "$SDK_DIR"
          # Fase prepare akan otomatis mengaplikasikan semua patch di package/sound/spotifyd-ng/patches
          make package/spotifyd-ng/{clean,prepare} V=s
          make package/spotifyd-ng/compile V=s

      - name: Collect artifacts
        shell: bash
        run: |
          set -eux
          cd "$SDK_DIR"
          mkdir -p "$GITHUB_WORKSPACE/_artifacts/${{ matrix.pretty }}"
          find bin/packages -type f -name '*spotifyd*' -exec cp -av {} "$GITHUB_WORKSPACE/_artifacts/${{ matrix.pretty }}/" \; || true
          find bin/targets -type f -name '*spotifyd*' -exec cp -av {} "$GITHUB_WORKSPACE/_artifacts/${{ matrix.pretty }}/" \; || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "spotifyd-${{ matrix.pretty }}"
          path: "_artifacts/${{ matrix.pretty }}/"
          if-no-files-found: warn
