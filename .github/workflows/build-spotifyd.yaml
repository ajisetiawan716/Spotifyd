name: Build Spotifyd

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - '.github/workflows/build-spotifyd.yaml'

jobs:
  build:
    name: build (${{ matrix.target }})
    runs-on: ubuntu-22.04
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64
            arch: x86_64
            toolchain_url: https://downloads.openwrt.org/releases/23.05.5/targets/x86/64/openwrt-sdk-23.05.5-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz
            toolchain_dir: toolchain-x86_64_gcc-12.3.0_musl
          - target: aarch64_cortex-a53
            arch: aarch64_cortex-a53
            toolchain_url: https://downloads.openwrt.org/releases/23.05.5/targets/mediatek/filogic/openwrt-sdk-23.05.5-mediatek-filogic_gcc-12.3.0_musl.Linux-x86_64.tar.xz
            toolchain_dir: toolchain-aarch64_cortex-a53_gcc-12.3.0_musl

    steps:
      - name: Checkout spotifyd source
        uses: actions/checkout@v4
        with:
          repository: Spotifyd/spotifyd
          ref: v0.4.1
          path: spotifyd-src

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential git curl wget \
            xz-utils tar python3 python3-distutils \
            libncurses-dev unzip rsync gawk gettext \
            musl-tools pkg-config libssl-dev \
            libasound2-dev autoconf automake libtool \
            openssl cmake ninja-build

      - name: Install Rust toolchain
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          source $HOME/.cargo/env
          rustc --version
          cargo --version

      - name: Download OpenWRT toolchain
        run: |
          set -eux
          echo "Downloading toolchain for ${{ matrix.target }}..."
          echo "URL: ${{ matrix.toolchain_url }}"
          curl -fsSL "${{ matrix.toolchain_url }}" -o toolchain.tar.xz
          mkdir -p /tmp/sdk-extract
          tar -xf toolchain.tar.xz -C /tmp/sdk-extract
          SDK_DIR=$(find /tmp/sdk-extract -name "openwrt-sdk-*" -type d | head -1)
          if [ -z "$SDK_DIR" ]; then
            echo "❌ Could not find SDK directory"
            ls -la /tmp/sdk-extract/
            exit 1
          fi
          echo "SDK found at: $SDK_DIR"
          export TOOLCHAIN_DIR="$SDK_DIR/staging_dir/${{ matrix.toolchain_dir }}"
          echo "TOOLCHAIN_DIR=$TOOLCHAIN_DIR" >> $GITHUB_ENV
          echo "SDK_DIR=$SDK_DIR" >> $GITHUB_ENV
          echo "Toolchain directory: $TOOLCHAIN_DIR"

      - name: Setup cross-compilation environment
        run: |
          set -eux
          echo "Setting up cross-compilation for ${{ matrix.target }}"
          echo "Toolchain directory: $TOOLCHAIN_DIR"
          CC=$(find "$TOOLCHAIN_DIR/bin" -name "*-gcc" | head -1)
          AR=$(find "$TOOLCHAIN_DIR/bin" -name "*-ar" | head -1)
          STRIP=$(find "$TOOLCHAIN_DIR/bin" -name "*-strip" | head -1)
          RANLIB=$(find "$TOOLCHAIN_DIR/bin" -name "*-ranlib" | head -1)
          
          if [ -z "$CC" ] || [ -z "$AR" ]; then
            echo "❌ Could not find compiler tools"
            echo "Looking in: $TOOLCHAIN_DIR/bin/"
            ls -la "$TOOLCHAIN_DIR/bin/" || echo "Directory not found"
            exit 1
          fi
          
          echo "Found CC: $CC"
          echo "Found AR: $AR"
          echo "Found STRIP: $STRIP"
          echo "Found RANLIB: $RANLIB"
          
          if [ "${{ matrix.target }}" = "x86_64" ]; then
            export CARGO_TARGET=x86_64-unknown-linux-musl
            export TARGET_ARCH=x86_64
          else
            export CARGO_TARGET=aarch64-unknown-linux-musl
            export TARGET_ARCH=aarch64
          fi
          
          rustup target add $CARGO_TARGET
          
          echo "CC=$CC" >> $GITHUB_ENV
          echo "AR=$AR" >> $GITHUB_ENV
          echo "STRIP=$STRIP" >> $GITHUB_ENV
          echo "RANLIB=$RANLIB" >> $GITHUB_ENV
          echo "CARGO_TARGET=$CARGO_TARGET" >> $GITHUB_ENV
          echo "TARGET_ARCH=$TARGET_ARCH" >> $GITHUB_ENV

      - name: Build ALSA library from source
        run: |
          set -eux
          echo "Building ALSA library for $TARGET_ARCH..."
          curl -fsSL https://www.alsa-project.org/files/pub/lib/alsa-lib-1.2.11.tar.bz2 -o alsa-lib.tar.bz2
          tar -xf alsa-lib.tar.bz2
          cd alsa-lib-1.2.11
          ./configure \
            --host=$TARGET_ARCH-linux-musl \
            --prefix=$TOOLCHAIN_DIR/usr \
            --enable-static \
            --disable-shared \
            --with-pic \
            CC="$CC" \
            AR="$AR" \
            RANLIB="$RANLIB" \
            STRIP="$STRIP" \
            --with-libdl=no \
            --with-pthread=yes
          make -j$(nproc)
          make install
          mkdir -p $TOOLCHAIN_DIR/usr/lib/pkgconfig
          echo "prefix=$TOOLCHAIN_DIR/usr" > $TOOLCHAIN_DIR/usr/lib/pkgconfig/alsa.pc
          echo "exec_prefix=\${prefix}" >> $TOOLCHAIN_DIR/usr/lib/pkgconfig/alsa.pc
          echo "libdir=\${exec_prefix}/lib" >> $TOOLCHAIN_DIR/usr/lib/pkgconfig/alsa.pc
          echo "includedir=\${prefix}/include" >> $TOOLCHAIN_DIR/usr/lib/pkgconfig/alsa.pc
          echo "" >> $TOOLCHAIN_DIR/usr/lib/pkgconfig/alsa.pc
          echo "Name: alsa" >> $TOOLCHAIN_DIR/usr/lib/pkgconfig/alsa.pc
          echo "Description: Advanced Linux Sound Architecture (ALSA) - Library" >> $TOOLCHAIN_DIR/usr/lib/pkgconfig/alsa.pc
          echo "Version: 1.2.11" >> $TOOLCHAIN_DIR/usr/lib/pkgconfig/alsa.pc
          echo "Requires: " >> $TOOLCHAIN_DIR/usr/lib/pkgconfig/alsa.pc
          echo "Libs: -L\${libdir} -lasound" >> $TOOLCHAIN_DIR/usr/lib/pkgconfig/alsa.pc
          echo "Libs.private: -lm -ldl -lpthread" >> $TOOLCHAIN_DIR/usr/lib/pkgconfig/alsa.pc
          echo "Cflags: -I\${includedir}" >> $TOOLCHAIN_DIR/usr/lib/pkgconfig/alsa.pc
          echo "ALSA library built and installed"

      - name: Build OpenSSL from source properly
        run: |
          set -eux
          echo "Building OpenSSL for $TARGET_ARCH..."
          
          # Download OpenSSL source
          curl -fsSL https://www.openssl.org/source/openssl-1.1.1w.tar.gz -o openssl.tar.gz
          tar -xf openssl.tar.gz
          cd openssl-1.1.1w
          
          # Determine the correct target and cross-compile prefix
          if [ "${{ matrix.target }}" = "x86_64" ]; then
            TARGET_OS="linux-x86_64"
            CROSS_PREFIX="x86_64-openwrt-linux-"
          else
            TARGET_OS="linux-aarch64"
            CROSS_PREFIX="aarch64-openwrt-linux-"
          fi
          
          # Configure untuk cross-compilation dengan environment yang benar
          export STAGING_DIR="$TOOLCHAIN_DIR"
          export PATH="$TOOLCHAIN_DIR/bin:$PATH"
          
          ./Configure \
            $TARGET_OS \
            no-shared \
            no-zlib \
            no-async \
            --prefix=$TOOLCHAIN_DIR/usr \
            --openssldir=$TOOLCHAIN_DIR/usr \
            --cross-compile-prefix=$CROSS_PREFIX \
            -fPIC \
            -static
          
          make -j$(nproc)
          make install
          
          echo "OpenSSL built and installed"

      - name: Setup environment variables
        run: |
          set -eux
          
          # Setup pkg-config
          export PKG_CONFIG_ALLOW_CROSS=1
          export PKG_CONFIG_SYSROOT_DIR="$TOOLCHAIN_DIR"
          export PKG_CONFIG_PATH="$TOOLCHAIN_DIR/usr/lib/pkgconfig:$TOOLCHAIN_DIR/lib/pkgconfig"
          export PKG_CONFIG_LIBDIR="$TOOLCHAIN_DIR/usr/lib/pkgconfig:$TOOLCHAIN_DIR/lib/pkgconfig"
          
          # Setup OpenSSL
          export OPENSSL_DIR="$TOOLCHAIN_DIR/usr"
          export OPENSSL_LIB_DIR="$TOOLCHAIN_DIR/usr/lib"
          export OPENSSL_INCLUDE_DIR="$TOOLCHAIN_DIR/usr/include"
          export OPENSSL_STATIC=1
          
          # Setup staging directory untuk toolchain
          export STAGING_DIR="$TOOLCHAIN_DIR"
          
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=$TOOLCHAIN_DIR" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "PKG_CONFIG_LIBDIR=$PKG_CONFIG_LIBDIR" >> $GITHUB_ENV
          echo "OPENSSL_DIR=$OPENSSL_DIR" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$OPENSSL_LIB_DIR" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$OPENSSL_INCLUDE_DIR" >> $GITHUB_ENV
          echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
          echo "STAGING_DIR=$STAGING_DIR" >> $GITHUB_ENV

      - name: Verify OpenSSL installation
        run: |
          set -eux
          echo "=== VERIFYING OPENSSL INSTALLATION ==="
          echo "OPENSSL_DIR: $OPENSSL_DIR"
          echo "OPENSSL_LIB_DIR: $OPENSSL_LIB_DIR"
          echo "OPENSSL_INCLUDE_DIR: $OPENSSL_INCLUDE_DIR"
          
          echo "=== OPENSSL HEADERS ==="
          ls -la $OPENSSL_INCLUDE_DIR/openssl/ || echo "No openssl headers found"
          
          echo "=== OPENSSL LIBRARIES ==="
          ls -la $OPENSSL_LIB_DIR/libssl* || echo "No ssl libraries found"
          ls -la $OPENSSL_LIB_DIR/libcrypto* || echo "No crypto libraries found"
          
          echo "=== PKG-CONFIG TEST ==="
          PKG_CONFIG_ALLOW_CROSS=1 \
          PKG_CONFIG_SYSROOT_DIR="$TOOLCHAIN_DIR" \
          PKG_CONFIG_PATH="$TOOLCHAIN_DIR/usr/lib/pkgconfig" \
          pkg-config --exists --print-errors openssl && echo "✅ OpenSSL found via pkg-config" || echo "❌ OpenSSL not found via pkg-config"

      - name: Force librespot v0.7.1
        run: |
          set -eux
          cd spotifyd-src
            
          # Backup original Cargo.toml
          cp Cargo.toml Cargo.toml.original
            
          # Modifikasi dependency librespot
          sed -i 's|librespot-audio = { version = "0.6", default-features = false }|librespot-audio = { git = "https://github.com/librespot-org/librespot.git", tag = "v0.7.1", default-features = false }|g' Cargo.toml
          sed -i 's|librespot-playback = { version = "0.6", default-features = false }|librespot-playback = { git = "https://github.com/librespot-org/librespot.git", tag = "v0.7.1", default-features = false }|g' Cargo.toml
          sed -i 's|librespot-core = "0.6"|librespot-core = { git = "https://github.com/librespot-org/librespot.git", tag = "v0.7.1" }|g' Cargo.toml
          sed -i 's|librespot-discovery = "0.6"|librespot-discovery = { git = "https://github.com/librespot-org/librespot.git", tag = "v0.7.1" }|g' Cargo.toml
          sed -i 's|librespot-connect = "0.6"|librespot-connect = { git = "https://github.com/librespot-org/librespot.git", tag = "v0.7.1" }|g' Cargo.toml
          sed -i 's|librespot-metadata = "0.6"|librespot-metadata = { git = "https://github.com/librespot-org/librespot.git", tag = "v0.7.1" }|g' Cargo.toml
          sed -i 's|librespot-protocol = "0.6"|librespot-protocol = { git = "https://github.com/librespot-org/librespot.git", tag = "v0.7.1" }|g' Cargo.toml
          sed -i 's|librespot-oauth = "0.6"|librespot-oauth = { git = "https://github.com/librespot-org/librespot.git", tag = "v0.7.1" }|g' Cargo.toml
          
          # Hapus Cargo.lock untuk memaksa resolusi dependency baru
          rm -f Cargo.lock
            
          # Verifikasi perubahan
          echo "=== VERIFYING DEPENDENCY CHANGES ==="
          grep -A 2 -B 1 "librespot" Cargo.toml
            
          # Update dependencies
          cargo update --verbose

      - name: Build spotifyd
        run: |
          set -eux
          cd spotifyd-src
            
          echo "Building spotifyd..."
          
          # Export semua environment variables yang diperlukan
          export PATH="$TOOLCHAIN_DIR/bin:$PATH"
          export STAGING_DIR="$TOOLCHAIN_DIR"
          
          # RUSTFLAGS untuk linker
          export RUSTFLAGS="-C linker=$CC -C ar=$AR -C target-feature=+crt-static -L $TOOLCHAIN_DIR/usr/lib -l asound -l dl -l pthread -l m -l ssl -l crypto"
            
          # Build dengan environment yang tepat
          CARGO_HOME="$HOME/.cargo" \
          RUSTFLAGS="$RUSTFLAGS" \
          PKG_CONFIG_ALLOW_CROSS=1 \
          PKG_CONFIG_SYSROOT_DIR="$TOOLCHAIN_DIR" \
          PKG_CONFIG_PATH="$TOOLCHAIN_DIR/usr/lib/pkgconfig:$PKG_CONFIG_PATH" \
          OPENSSL_DIR="$OPENSSL_DIR" \
          OPENSSL_LIB_DIR="$OPENSSL_LIB_DIR" \
          OPENSSL_INCLUDE_DIR="$OPENSSL_INCLUDE_DIR" \
          OPENSSL_STATIC=1 \
          STAGING_DIR="$STAGING_DIR" \
          cargo build \
            --release \
            --no-default-features \
            --features alsa_backend \
            --target $CARGO_TARGET
            
          $STRIP target/$CARGO_TARGET/release/spotifyd

      - name: Verify build and dependencies
        run: |
          set -eux
          cd spotifyd-src
          
          echo "=== BUILD VERIFICATION ==="
          echo "Binary info:"
          file target/$CARGO_TARGET/release/spotifyd
          
          echo "Binary dependencies:"
          ldd target/$CARGO_TARGET/release/spotifyd 2>/dev/null || echo "Binary is statically linked"
          
          echo "Binary size:"
          ls -la target/$CARGO_TARGET/release/spotifyd

      - name: Create OpenWRT package
        run: |
          set -eux
          mkdir -p spotifyd-ng_control
          echo "Package: spotifyd-ng" > spotifyd-ng_control/control
          echo "Version: 0.4.1-1" >> spotifyd-ng_control/control
          echo "Depends: libc, libstdcpp, libpthread" >> spotifyd-ng_control/control
          echo "Source: https://github.com/Spotifyd/spotifyd" >> spotifyd-ng_control/control
          echo "Section: sound" >> spotifyd-ng_control/control
          echo "Category: Sound" >> spotifyd-ng_control/control
          echo "Title: Spotify daemon" >> spotifyd-ng_control/control
          echo "Maintainer: Build Bot <noreply@github.com>" >> spotifyd-ng_control/control
          echo "Architecture: ${{ matrix.arch }}" >> spotifyd-ng_control/control
          echo "Description: A spotify playing daemon for OpenWrt." >> spotifyd-ng_control/control
          mkdir -p spotifyd-ng_data/usr/bin
          cp spotifyd-src/target/$CARGO_TARGET/release/spotifyd spotifyd-ng_data/usr/bin/
          chmod +x spotifyd-ng_data/usr/bin/spotifyd
          cd spotifyd-ng_data && tar -czf ../data.tar.gz . && cd ..
          cd spotifyd-ng_control && tar -czf ../control.tar.gz . && cd ..
          echo "2.0" > debian-binary
          tar -czf spotifyd-ng_${{ matrix.arch }}.ipk ./debian-binary ./data.tar.gz ./control.tar.gz
          mkdir -p output/${{ matrix.target }}
          mv spotifyd-ng_${{ matrix.arch }}.ipk output/${{ matrix.target }}/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: spotifyd-${{ matrix.target }}-ipk
          path: output/${{ matrix.target }}/
          if-no-files-found: error

      - name: Final verification
        run: |
          echo "=== FINAL PACKAGE VERIFICATION ==="
          echo "Binary architecture:"
          file spotifyd-src/target/$CARGO_TARGET/release/spotifyd
          echo "Package contents:"
          tar -ztvf output/${{ matrix.target }}/*.ipk || echo "Package not found"
          echo "Build process completed!"
