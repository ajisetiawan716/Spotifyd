name: build-spotifyd-openwrt-standalone

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - '.github/workflows/build-spotifyd.yaml'

jobs:
  build:
    name: build (${{ matrix.target }})
    runs-on: ubuntu-22.04
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64
            arch: x86_64
            toolchain_url: https://downloads.openwrt.org/releases/23.05.5/targets/x86/64/openwrt-sdk-23.05.5-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz
            toolchain_dir: toolchain-x86_64_gcc-12.3.0_musl
          - target: aarch64_cortex-a53
            arch: aarch64_cortex-a53
            toolchain_url: https://downloads.openwrt.org/releases/23.05.5/targets/mediatek/filogic/openwrt-sdk-23.05.5-mediatek-filogic_gcc-12.3.0_musl.Linux-x86_64.tar.xz
            toolchain_dir: toolchain-aarch64_cortex-a53_gcc-12.3.0_musl

    steps:
      - name: Checkout spotifyd source
        uses: actions/checkout@v4
        with:
          repository: Spotifyd/spotifyd
          ref: v0.4.1
          path: spotifyd-src

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential git curl wget \
            xz-utils tar python3 python3-distutils \
            libncurses-dev unzip rsync gawk gettext \
            musl-tools pkg-config libssl-dev \
            libasound2-dev autoconf automake libtool \
            openssl libssl-dev

      - name: Install Rust toolchain
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          source $HOME/.cargo/env
          rustc --version
          cargo --version

      - name: Download OpenWRT toolchain
        run: |
          set -eux
          echo "Downloading toolchain for ${{ matrix.target }}..."
          echo "URL: ${{ matrix.toolchain_url }}"
          curl -fsSL "${{ matrix.toolchain_url }}" -o toolchain.tar.xz
          mkdir -p /tmp/sdk-extract
          tar -xf toolchain.tar.xz -C /tmp/sdk-extract
          SDK_DIR=$(find /tmp/sdk-extract -name "openwrt-sdk-*" -type d | head -1)
          if [ -z "$SDK_DIR" ]; then
            echo "❌ Could not find SDK directory"
            ls -la /tmp/sdk-extract/
            exit 1
          fi
          echo "SDK found at: $SDK_DIR"
          export TOOLCHAIN_DIR="$SDK_DIR/staging_dir/${{ matrix.toolchain_dir }}"
          echo "TOOLCHAIN_DIR=$TOOLCHAIN_DIR" >> $GITHUB_ENV
          echo "SDK_DIR=$SDK_DIR" >> $GITHUB_ENV
          echo "Toolchain directory: $TOOLCHAIN_DIR"

      - name: Setup cross-compilation environment
        run: |
          set -eux
          echo "Setting up cross-compilation for ${{ matrix.target }}"
          echo "Toolchain directory: $TOOLCHAIN_DIR"
          CC=$(find "$TOOLCHAIN_DIR/bin" -name "*-gcc" | head -1)
          AR=$(find "$TOOLCHAIN_DIR/bin" -name "*-ar" | head -1)
          STRIP=$(find "$TOOLCHAIN_DIR/bin" -name "*-strip" | head -1)
          RANLIB=$(find "$TOOLCHAIN_DIR/bin" -name "*-ranlib" | head -1)
          
          if [ -z "$CC" ] || [ -z "$AR" ]; then
            echo "❌ Could not find compiler tools"
            echo "Looking in: $TOOLCHAIN_DIR/bin/"
            ls -la "$TOOLCHAIN_DIR/bin/" || echo "Directory not found"
            exit 1
          fi
          
          echo "Found CC: $CC"
          echo "Found AR: $AR"
          echo "Found STRIP: $STRIP"
          echo "Found RANLIB: $RANLIB"
          
          if [ "${{ matrix.target }}" = "x86_64" ]; then
            export CARGO_TARGET=x86_64-unknown-linux-musl
            export TARGET_ARCH=x86_64
          else
            export CARGO_TARGET=aarch64-unknown-linux-musl
            export TARGET_ARCH=aarch64
          fi
          
          rustup target add $CARGO_TARGET
          
          echo "CC=$CC" >> $GITHUB_ENV
          echo "AR=$AR" >> $GITHUB_ENV
          echo "STRIP=$STRIP" >> $GITHUB_ENV
          echo "RANLIB=$RANLIB" >> $GITHUB_ENV
          echo "CARGO_TARGET=$CARGO_TARGET" >> $GITHUB_ENV
          echo "TARGET_ARCH=$TARGET_ARCH" >> $GITHUB_ENV

      - name: Setup pkg-config environment
        run: |
          set -eux
          
          export PKG_CONFIG_ALLOW_CROSS=1
          export PKG_CONFIG_SYSROOT_DIR="$TOOLCHAIN_DIR"
          export PKG_CONFIG_PATH="$TOOLCHAIN_DIR/usr/lib/pkgconfig:$TOOLCHAIN_DIR/lib/pkgconfig"
          export PKG_CONFIG_LIBDIR="$TOOLCHAIN_DIR/usr/lib/pkgconfig:$TOOLCHAIN_DIR/lib/pkgconfig"
          
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=$TOOLCHAIN_DIR" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "PKG_CONFIG_LIBDIR=$PKG_CONFIG_LIBDIR" >> $GITHUB_ENV

      - name: Force librespot v0.7.1 patch
        run: |
          set -eux
          cd spotifyd-src
          
          # Completely remove Cargo.lock and target directory for clean build
          rm -f Cargo.lock
          rm -rf target
          
          # Backup original Cargo.toml
          cp Cargo.toml Cargo.toml.original
          
          # Directly modify version requirements in dependencies
          sed -i 's/^librespot =.*/librespot = { git = "https:\/\/github.com\/librespot-org\/librespot.git", tag = "v0.7.1" }/' Cargo.toml
          sed -i 's/^librespot-core =.*/librespot-core = { git = "https:\/\/github.com\/librespot-org\/librespot.git", tag = "v0.7.1" }/' Cargo.toml
          sed -i 's/^librespot-audio =.*/librespot-audio = { git = "https:\/\/github.com\/librespot-org\/librespot.git", tag = "v0.7.1" }/' Cargo.toml
          sed -i 's/^librespot-protocol =.*/librespot-protocol = { git = "https:\/\/github.com\/librespot-org\/librespot.git", tag = "v0.7.1" }/' Cargo.toml
          sed -i 's/^librespot-connect =.*/librespot-connect = { git = "https:\/\/github.com\/librespot-org\/librespot.git", tag = "v0.7.1" }/' Cargo.toml
          sed -i 's/^librespot-playback =.*/librespot-playback = { git = "https:\/\/github.com\/librespot-org\/librespot.git", tag = "v0.7.1" }/' Cargo.toml
          sed -i 's/^librespot-discovery =.*/librespot-discovery = { git = "https:\/\/github.com\/librespot-org\/librespot.git", tag = "v0.7.1" }/' Cargo.toml
          sed -i 's/^librespot-metadata =.*/librespot-metadata = { git = "https:\/\/github.com\/librespot-org\/librespot.git", tag = "v0.7.1" }/' Cargo.toml
          sed -i 's/^librespot-oauth =.*/librespot-oauth = { git = "https:\/\/github.com\/librespot-org\/librespot.git", tag = "v0.7.1" }/' Cargo.toml
          
          # Remove any existing patch section to avoid conflicts
          sed -i '/^\[patch.crates-io\]/,/^$/d' Cargo.toml
          
          # Force full dependency resolution
          cargo update --verbose
          
          # Verify patch application
          echo "=== VERIFYING PATCH APPLICATION ==="
          echo "Modified dependencies in Cargo.toml:"
          grep -n "librespot" Cargo.toml
          echo ""
          echo "Cargo.lock entries:"
          grep -A 2 -B 1 "librespot.*git" Cargo.lock || echo "No git dependencies found - checking all librespot:"
          grep -A 2 -B 1 "name = \"librespot" Cargo.lock || echo "No librespot entries in Cargo.lock"

      - name: Build spotifyd with vendored OpenSSL
        run: |
          set -eux
          cd spotifyd-src
          
          echo "Building spotifyd with vendored OpenSSL..."
          echo "CC: $CC"
          echo "AR: $AR"
          echo "Target: $CARGO_TARGET"
          
          # Use vendored OpenSSL feature to avoid cross-compilation issues
          export RUSTFLAGS="-C linker=$CC -C ar=$AR -C target-feature=+crt-static -L $TOOLCHAIN_DIR/usr/lib -l asound -l dl -l pthread -l m"
          
          CARGO_HOME="$HOME/.cargo" \
          RUSTFLAGS="$RUSTFLAGS" \
          PKG_CONFIG_ALLOW_CROSS=1 \
          PKG_CONFIG_SYSROOT_DIR="$TOOLCHAIN_DIR" \
          PKG_CONFIG_PATH="$PKG_CONFIG_PATH" \
          OPENSSL_DIR="$TOOLCHAIN_DIR/usr" \
          OPENSSL_STATIC=1 \
          cargo build \
            --release \
            --no-default-features \
            --features alsa_backend,vendored-openssl \
            --target $CARGO_TARGET
          
          $STRIP target/$CARGO_TARGET/release/spotifyd

      - name: Verify build and dependencies
        run: |
          set -eux
          cd spotifyd-src
          
          echo "=== BUILD VERIFICATION ==="
          echo "Binary info:"
          file target/$CARGO_TARGET/release/spotifyd
          
          echo "Binary dependencies:"
          ldd target/$CARGO_TARGET/release/spotifyd 2>/dev/null || echo "Binary is statically linked"
          
          echo "Binary size:"
          ls -la target/$CARGO_TARGET/release/spotifyd

      - name: Create OpenWRT package
        run: |
          set -eux
          mkdir -p spotifyd-ng_control
          echo "Package: spotifyd-ng" > spotifyd-ng_control/control
          echo "Version: 0.4.1-1" >> spotifyd-ng_control/control
          echo "Depends: libc, libstdcpp, libpthread" >> spotifyd-ng_control/control
          echo "Source: https://github.com/Spotifyd/spotifyd" >> spotifyd-ng_control/control
          echo "Section: sound" >> spotifyd-ng_control/control
          echo "Category: Sound" >> spotifyd-ng_control/control
          echo "Title: Spotify daemon" >> spotifyd-ng_control/control
          echo "Maintainer: Build Bot <noreply@github.com>" >> spotifyd-ng_control/control
          echo "Architecture: ${{ matrix.arch }}" >> spotifyd-ng_control/control
          echo "Description: A spotify playing daemon for OpenWrt." >> spotifyd-ng_control/control
          mkdir -p spotifyd-ng_data/usr/bin
          cp spotifyd-src/target/$CARGO_TARGET/release/spotifyd spotifyd-ng_data/usr/bin/
          chmod +x spotifyd-ng_data/usr/bin/spotifyd
          cd spotifyd-ng_data && tar -czf ../data.tar.gz . && cd ..
          cd spotifyd-ng_control && tar -czf ../control.tar.gz . && cd ..
          echo "2.0" > debian-binary
          tar -czf spotifyd-ng_${{ matrix.arch }}.ipk ./debian-binary ./data.tar.gz ./control.tar.gz
          mkdir -p output/${{ matrix.target }}
          mv spotifyd-ng_${{ matrix.arch }}.ipk output/${{ matrix.target }}/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: spotifyd-${{ matrix.target }}-ipk
          path: output/${{ matrix.target }}/
          if-no-files-found: error

      - name: Final verification
        run: |
          echo "=== FINAL PACKAGE VERIFICATION ==="
          echo "Binary architecture:"
          file spotifyd-src/target/$CARGO_TARGET/release/spotifyd
          echo "Package contents:"
          tar -ztvf output/${{ matrix.target }}/*.ipk || echo "Package not found"
          echo "Build process completed!"