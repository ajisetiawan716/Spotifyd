name: build-spotifyd-openwrt

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'package/**'
      - '.github/workflows/build-spotifyd.yaml'

jobs:
  build:
    name: build (${{ matrix.target }})
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64
            pretty: x86-64
            sdk: https://downloads.openwrt.org/releases/23.05.5/targets/x86/64/openwrt-sdk-23.05.5-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz
          - target: aarch64_generic
            pretty: mediatek-filogic
            sdk: https://downloads.openwrt.org/releases/23.05.5/targets/mediatek/filogic/openwrt-sdk-23.05.5-mediatek-filogic_gcc-12.3.0_musl.Linux-x86_64.tar.xz

    env:
      TERM: dumb
      DEBIAN_FRONTEND: noninteractive
      KCONFIG_NONINTERACTIVE: 1
      FORCE_UNSAFE_CONFIGURE: 1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            git curl wget \
            xz-utils tar \
            python3 python3-distutils \
            libncurses-dev \
            unzip rsync

      - name: Download OpenWrt SDK
        run: |
          set -eux
          echo "Downloading SDK for ${{ matrix.target }}..."
          curl -fsSL "${{ matrix.sdk }}" -o sdk.tar.xz
          tar -xf sdk.tar.xz
          echo "SDK_DIR=$(echo openwrt-sdk-*)" >> $GITHUB_ENV
          echo "STAGING_DIR=$GITHUB_WORKSPACE/$(echo openwrt-sdk-*)/staging_dir" >> $GITHUB_ENV

      - name: Setup environment variables
        run: |
          echo "PATH=${{ env.STAGING_DIR }}/toolchain/bin:$PATH" >> $GITHUB_ENV
          echo "CC=${{ env.STAGING_DIR }}/toolchain/bin/$(if [ '${{ matrix.target }}' = 'x86_64' ]; then echo 'x86_64-openwrt-linux-musl-gcc'; else echo 'aarch64-openwrt-linux-musl-gcc'; fi)" >> $GITHUB_ENV
          echo "CXX=${{ env.STAGING_DIR }}/toolchain/bin/$(if [ '${{ matrix.target }}' = 'x86_64' ]; then echo 'x86_64-openwrt-linux-musl-g++'; else echo 'aarch64-openwrt-linux-musl-g++'; fi)" >> $GITHUB_ENV
          echo "AR=${{ env.STAGING_DIR }}/toolchain/bin/$(if [ '${{ matrix.target }}' = 'x86_64' ]; then echo 'x86_64-openwrt-linux-musl-ar'; else echo 'aarch64-openwrt-linux-musl-ar'; fi)" >> $GITHUB_ENV

      - name: Setup OpenWrt feeds dengan benar
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          export TERM=dumb
          export KCONFIG_NONINTERACTIVE=1
          
          # Update semua feeds
          ./scripts/feeds update -a
          
          # Install semua packages dari feeds packages
          ./scripts/feeds install -a -p packages
          
          # Install dependencies yang diperlukan
          ./scripts/feeds install rust
          ./scripts/feeds install alsa-lib
          ./scripts/feeds install libstdcpp
          ./scripts/feeds install libpthread
          
          # Tambahkan local feed dengan path yang benar
          echo "src-link local $GITHUB_WORKSPACE" >> feeds.conf.default
          ./scripts/feeds update local
          ./scripts/feeds install -a -p local

      - name: Configure SDK untuk non-interactive build
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          export TERM=dumb
          export KCONFIG_NONINTERACTIVE=1
          
          # Buat defconfig
          make defconfig
          
          # Pastikan Rust dan spotifyd-ng enabled
          echo "CONFIG_PACKAGE_RUST=y" >> .config
          echo "CONFIG_PACKAGE_spotifyd-ng=y" >> .config
          echo "CONFIG_PACKAGE_alsa-lib=y" >> .config
          echo "CONFIG_PACKAGE_libstdcpp=y" >> .config
          echo "CONFIG_PACKAGE_libpthread=y" >> .config
          
          # Update config
          make defconfig
          
          # Verifikasi config
          grep "CONFIG_PACKAGE_RUST=y" .config || echo "Rust not enabled!"
          grep "CONFIG_PACKAGE_spotifyd-ng=y" .config || echo "spotifyd-ng not enabled!"

      - name: Build spotifyd-ng package
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          export TERM=dumb
          export KCONFIG_NONINTERACTIVE=1
          
          # Build package dengan verbose output
          make package/feeds/local/spotifyd-ng/compile V=s

      - name: Collect built IPK packages
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          mkdir -p "$GITHUB_WORKSPACE/out/${{ matrix.target }}"
          
          # Cari file IPK yang berhasil dibuild
          find bin -name "*spotifyd-ng*.ipk" -exec cp -v {} "$GITHUB_WORKSPACE/out/${{ matrix.target }}/" \;
          
          # Jika tidak ditemukan, cari di semua directory
          if [ -z "$(ls -A "$GITHUB_WORKSPACE/out/${{ matrix.target }}")" ]; then
            echo "Searching for IPK files in all directories..."
            find . -name "*spotifyd-ng*.ipk" -exec cp -v {} "$GITHUB_WORKSPACE/out/${{ matrix.target }}/" \;
          fi
          
          # List files yang ditemukan
          echo "Built packages:"
          ls -la "$GITHUB_WORKSPACE/out/${{ matrix.target }}/" || true

      - name: Verify IPK package contents
        run: |
          set -eux
          if [ -n "$(ls -A "out/${{ matrix.target }}" 2>/dev/null)" ]; then
            echo "Inspecting IPK package..."
            for ipk in "out/${{ matrix.target }}"/*.ipk; do
              echo "Package: $ipk"
              tar -tzf "$ipk" || true
            done
          else
            echo "No IPK files found for ${{ matrix.target }}"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: spotifyd-${{ matrix.target }}-ipk
          path: out/${{ matrix.target }}/
          if-no-files-found: warn

      - name: Debug - List build directory jika gagal
        if: failure()
        working-directory: ${{ env.SDK_DIR }}
        run: |
          echo "=== DEBUG INFO ==="
          echo "Current directory: $(pwd)"
          echo "Local feeds contents:"
          ls -la feeds/local/ || true
          echo "Package directory exists:"
          ls -la feeds/local/spotifyd-ng/ || true
          echo "Makefile contents:"
          cat feeds/local/spotifyd-ng/Makefile || true
          echo "Rust directory:"
          ls -la feeds/packages/lang/rust/ || true
          echo "Config status:"
          grep "RUST\|spotifyd" .config || true