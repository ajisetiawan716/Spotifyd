name: build-spotifyd-openwrt

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'package/**'
      - '.github/workflows/build-spotifyd.yaml'

jobs:
  build:
    name: build (${{ matrix.target }})
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64
            pretty: x86-64
            sdk: https://downloads.openwrt.org/releases/23.05.5/targets/x86/64/openwrt-sdk-23.05.5-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz
          - target: aarch64_generic
            pretty: mediatek-filogic
            sdk: https://downloads.openwrt.org/releases/23.05.5/targets/mediatek/filogic/openwrt-sdk-23.05.5-mediatek-filogic_gcc-12.3.0_musl.Linux-x86_64.tar.xz

    env:
      TERM: dumb
      DEBIAN_FRONTEND: noninteractive
      KCONFIG_NONINTERACTIVE: 1
      FORCE_UNSAFE_CONFIGURE: 1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            git curl wget \
            xz-utils tar \
            python3 python3-distutils \
            libncurses-dev \
            unzip rsync \
            gawk gettext

      - name: Install Rust toolchain
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          source $HOME/.cargo/env
          rustc --version
          cargo --version

      - name: Download OpenWrt SDK
        run: |
          set -eux
          echo "Downloading SDK for ${{ matrix.target }}..."
          curl -fsSL "${{ matrix.sdk }}" -o sdk.tar.xz
          tar -xf sdk.tar.xz
          SDK_DIR=$(echo openwrt-sdk-*)
          echo "SDK_DIR=$SDK_DIR" >> $GITHUB_ENV
          echo "STAGING_DIR=$GITHUB_WORKSPACE/$SDK_DIR/staging_dir" >> $GITHUB_ENV
          echo "SDK downloaded and extracted: $SDK_DIR"

      - name: Prepare SDK environment
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          export TERM=dumb
          export KCONFIG_NONINTERACTIVE=1
          
          echo "Creating prerequisite directories..."
          mkdir -p host/.prereq-build
          touch host/.prereq-build
          echo "Prerequisite setup completed"

      - name: Setup package feeds
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          export TERM=dumb
          export KCONFIG_NONINTERACTIVE=1
          
          echo "Updating feeds..."
          ./scripts/feeds update -a
          
          echo "Installing package dependencies..."
          ./scripts/feeds install alsa-lib
          ./scripts/feeds install libstdcpp
          ./scripts/feeds install libpthread
          
          echo "Package dependencies installed"

      - name: Setup local feed
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          export TERM=dumb
          export KCONFIG_NONINTERACTIVE=1
          
          echo "Setting up local feed..."
          echo "src-link local $GITHUB_WORKSPACE/package" >> feeds.conf.default
          ./scripts/feeds update local
          ./scripts/feeds install -a -p local
          
          echo "Local feed setup completed"

      - name: Configure SDK dengan force enable
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          export TERM=dumb
          export KCONFIG_NONINTERACTIVE=1
          
          echo "=== CONFIGURATION ==="
          echo "Step 1: Initial defconfig"
          make defconfig
          
          echo "Step 2: Force enable required packages"
          # Hanya enable packages yang valid
          VALID_PACKAGES="alsa-lib libstdcpp libpthread"
          
          for pkg in $VALID_PACKAGES; do
            sed -i '/CONFIG_PACKAGE_'"$pkg"'/d' .config 2>/dev/null || true
            echo "CONFIG_PACKAGE_${pkg}=y" >> .config
            echo "Enabled $pkg"
          done
          
          # Enable spotifyd-ng package
          echo "CONFIG_PACKAGE_spotifyd-ng=y" >> .config
          
          echo "Step 3: Finalize configuration"
          make defconfig
          
          echo "Step 4: Verify configuration"
          echo "=== CONFIG STATUS ==="
          for pkg in $VALID_PACKAGES spotifyd-ng; do
            if grep -q "CONFIG_PACKAGE_${pkg}=y" .config; then
              echo "✅ $pkg: ENABLED"
            else
              echo "❌ $pkg: MISSING"
              echo "Current value: $(grep CONFIG_PACKAGE_${pkg} .config 2>/dev/null || echo 'NOT FOUND')"
              exit 1
            fi
          done
          
          echo "✅ All packages configured successfully"

      - name: Setup Rust environment variables
        working-directory: ${{ env.SDK_DIR }}
        run: |
          echo "Setting up Rust environment..."
          export CARGO_HOME="$HOME/.cargo"
          export RUSTUP_HOME="$HOME/.rustup"
          export PATH="$CARGO_HOME/bin:$PATH"
          
          # Set environment untuk build system
          echo "CARGO_HOME=$CARGO_HOME" >> $GITHUB_ENV
          echo "RUSTUP_HOME=$RUSTUP_HOME" >> $GITHUB_ENV
          echo "PATH=$PATH" >> $GITHUB_ENV
          
          rustc --version
          cargo --version

      - name: Build spotifyd-ng package dengan prebuilt Rust
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          export TERM=dumb
          export KCONFIG_NONINTERACTIVE=1
          
          echo "=== BUILDING SPOTIFYD-NG WITH PREBUILT RUST ==="
          echo "Using prebuilt Rust toolchain:"
          which rustc
          rustc --version
          
          # Export variables untuk cargo build
          export CARGO_BUILD_TARGET=x86_64-unknown-linux-musl
          export CC_x86_64_unknown_linux_musl="$STAGING_DIR/toolchain-x86_64_gcc-12.3.0_musl/bin/x86_64-openwrt-linux-gcc"
          export CXX_x86_64_unknown_linux_musl="$STAGING_DIR/toolchain-x86_64_gcc-12.3.0_musl/bin/x86_64-openwrt-linux-g++"
          export AR_x86_64_unknown_linux_musl="$STAGING_DIR/toolchain-x86_64_gcc-12.3.0_musl/bin/x86_64-openwrt-linux-ar"
          export STRIP_x86_64_unknown_linux_musl="$STAGING_DIR/toolchain-x86_64_gcc-12.3.0_musl/bin/x86_64-openwrt-linux-strip"
          
          echo "Starting build process..."
          make package/feeds/local/spotifyd-ng/compile V=s

      - name: Collect artifacts
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          echo "=== COLLECTING ARTIFACTS ==="
          mkdir -p "$GITHUB_WORKSPACE/out/${{ matrix.target }}"
          
          find bin -name "*spotifyd-ng*.ipk" -exec cp -v {} "$GITHUB_WORKSPACE/out/${{ matrix.target }}/" \;
          
          if [ -z "$(ls -A "$GITHUB_WORKSPACE/out/${{ matrix.target }}")" ]; then
            echo "Searching in other directories..."
            find . -name "*spotifyd-ng*.ipk" -exec cp -v {} "$GITHUB_WORKSPACE/out/${{ matrix.target }}/" \;
          fi
          
          echo "Artifacts collected:"
          ls -la "$GITHUB_WORKSPACE/out/${{ matrix.target }}/" || echo "No artifacts found"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: spotifyd-${{ matrix.target }}-ipk
          path: out/${{ matrix.target }}/
          if-no-files-found: warn

      - name: Debug info if failed
        if: failure()
        working-directory: ${{ env.SDK_DIR }}
        run: |
          echo "=== DEBUG INFO ==="
          echo "Current directory: $(pwd)"
          
          echo "=== CONFIG STATUS ==="
          if [ -f .config ]; then
            echo "alsa-lib config: $(grep 'CONFIG_PACKAGE_alsa-lib' .config || echo 'NOT FOUND')"
            echo "libstdcpp config: $(grep 'CONFIG_PACKAGE_libstdcpp' .config || echo 'NOT FOUND')"
            echo "libpthread config: $(grep 'CONFIG_PACKAGE_libpthread' .config || echo 'NOT FOUND')"
            echo "spotifyd-ng config: $(grep 'CONFIG_PACKAGE_spotifyd-ng' .config || echo 'NOT FOUND')"
          else
            echo "No .config file found"
          fi
          
          echo "=== RUST ENVIRONMENT ==="
          which rustc || echo "rustc not found"
          rustc --version || echo "rustc version check failed"
          echo "CARGO_HOME: $CARGO_HOME"
          echo "RUSTUP_HOME: $RUSTUP_HOME"
          
          echo "=== FEEDS STATUS ==="
          ls -la feeds/ 2>/dev/null || echo "No feeds directory"
          
          echo "=== BUILD LOGS ==="
          find . -name "*.log" -exec tail -5 {} \; 2>/dev/null | head -20 || echo "No build logs found"