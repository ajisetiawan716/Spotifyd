name: build-spotifyd-openwrt

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'package/**'
      - '.github/workflows/build-spotifyd.yaml'

jobs:
  build:
    name: build (${{ matrix.target }})
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64
            pretty: x86-64
            sdk: https://downloads.openwrt.org/releases/23.05.5/targets/x86/64/openwrt-sdk-23.05.5-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz
          - target: aarch64_generic
            pretty: mediatek-filogic
            sdk: https://downloads.openwrt.org/releases/23.05.5/targets/mediatek/filogic/openwrt-sdk-23.05.5-mediatek-filogic_gcc-12.3.0_musl.Linux-x86_64.tar.xz

    env:
      TERM: dumb
      DEBIAN_FRONTEND: noninteractive
      KCONFIG_NONINTERACTIVE: 1
      FORCE_UNSAFE_CONFIGURE: 1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            git curl wget \
            xz-utils tar \
            python3 python3-distutils \
            libncurses-dev \
            unzip rsync \
            gawk gettext

      - name: Download OpenWrt SDK
        run: |
          set -eux
          echo "Downloading SDK for ${{ matrix.target }}..."
          curl -fsSL "${{ matrix.sdk }}" -o sdk.tar.xz
          tar -xf sdk.tar.xz
          SDK_DIR=$(echo openwrt-sdk-*)
          echo "SDK_DIR=$SDK_DIR" >> $GITHUB_ENV
          echo "STAGING_DIR=$GITHUB_WORKSPACE/$SDK_DIR/staging_dir" >> $GITHUB_ENV

      - name: Prepare SDK environment
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          export TERM=dumb
          export KCONFIG_NONINTERACTIVE=1
          
          mkdir -p host/.prereq-build
          touch host/.prereq-build

      - name: Setup package feeds
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          export TERM=dumb
          export KCONFIG_NONINTERACTIVE=1
          
          ./scripts/feeds update -a
          ./scripts/feeds install -a -p packages
          ./scripts/feeds install rust
          ./scripts/feeds install alsa-lib
          ./scripts/feeds install libstdcpp
          ./scripts/feeds install libpthread

      - name: Setup local feed
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          export TERM=dumb
          export KCONFIG_NONINTERACTIVE=1
          
          echo "src-link local $GITHUB_WORKSPACE/package" >> feeds.conf.default
          ./scripts/feeds update local
          ./scripts/feeds install -a -p local

      - name: Configure SDK
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          export TERM=dumb
          export KCONFIG_NONINTERACTIVE=1
          
          make defconfig
          echo "CONFIG_PACKAGE_RUST=y" >> .config
          echo "CONFIG_PACKAGE_spotifyd-ng=y" >> .config
          echo "CONFIG_PACKAGE_alsa-lib=y" >> .config
          echo "CONFIG_PACKAGE_libstdcpp=y" >> .config
          echo "CONFIG_PACKAGE_libpthread=y" >> .config
          make defconfig

      - name: Build spotifyd-ng package
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          export TERM=dumb
          export KCONFIG_NONINTERACTIVE=1
          
          make package/feeds/local/spotifyd-ng/compile V=s

      - name: Collect artifacts
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          mkdir -p "$GITHUB_WORKSPACE/out/${{ matrix.target }}"
          find bin -name "*spotifyd-ng*.ipk" -exec cp -v {} "$GITHUB_WORKSPACE/out/${{ matrix.target }}/" \;
          echo "Built packages:"
          ls -la "$GITHUB_WORKSPACE/out/${{ matrix.target }}/" || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: spotifyd-${{ matrix.target }}-ipk
          path: out/${{ matrix.target }}/
          if-no-files-found: warn

      - name: Debug info if failed
        if: failure()
        working-directory: ${{ env.SDK_DIR }}
        run: |
          echo "=== DEBUG INFO ==="
          echo "Current directory: $(pwd)"
          echo "Directory structure:"
          ls -la
          echo "Feeds local:"
          ls -la feeds/local/ || true
          echo "Config:"
          cat .config 2>/dev/null || echo "No config"