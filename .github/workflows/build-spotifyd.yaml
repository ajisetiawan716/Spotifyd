name: Build spotifyd (patched) - OpenWrt 24.x fast

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        sdk:
          - name: x86_64
            target_path: x86/64
            # pola nama file SDK yang kita cari di index:
            pattern: 'openwrt-sdk-[^"]*-x86-64_gcc-[^"]*_musl\.Linux-x86_64\.tar\.xz'
          - name: aarch64_generic
            target_path: mediatek/filogic
            pattern: 'openwrt-sdk-[^"]*-mediatek-filogic_gcc-[^"]*_musl\.Linux-x86_64\.tar\.xz'

    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3 wget xz-utils git rsync pkg-config curl

      # Cari SDK di releases 24.x (coba 24.10.0, 24.10, 24.07.0, 24.07), lalu fallback ke snapshots
      - name: Resolve SDK URL dynamically
        id: sdkurl
        run: |
          set -euo pipefail
          TARGET="${{ matrix.sdk.target_path }}"
          PATTERN='${{ matrix.sdk.pattern }}'

          try_release_dir () {
            local REL="$1"
            local BASE="https://downloads.openwrt.org/releases/${REL}/targets/${TARGET}/"
            echo ">> probing $BASE" >&2
            # ambil listing html lalu grep nama tarball sdk
            local FILE
            FILE=$(curl -fsSL "$BASE" | grep -oE "$PATTERN" | head -n1 || true)
            if [ -n "${FILE:-}" ]; then
              echo "Found in releases $REL: $FILE" >&2
              echo "${BASE}${FILE}"
              return 0
            fi
            return 1
          }

          URL=""
          for REL in 24.10.0 24.10 24.07.0 24.07; do
            if URL="$(try_release_dir "$REL")"; then
              break
            fi
          done

          if [ -z "$URL" ]; then
            # fallback snapshots
            BASE="https://downloads.openwrt.org/snapshots/targets/${TARGET}/"
            echo ">> fallback probing snapshots $BASE" >&2
            FILE=$(curl -fsSL "$BASE" | grep -oE "$PATTERN" | head -n1 || true)
            if [ -n "${FILE:-}" ]; then
              URL="${BASE}${FILE}"
              echo "Found in snapshots: $FILE" >&2
            fi
          fi

          if [ -z "$URL" ]; then
            echo "ERROR: No SDK tarball found for target ${TARGET}" >&2
            exit 1
          fi

          echo "url=$URL" >> "$GITHUB_OUTPUT"

      - name: Download OpenWrt SDK
        run: |
          wget -q "${{ steps.sdkurl.outputs.url }}" -O sdk.tar.xz
          tar xf sdk.tar.xz
          echo SDK_DIR=$(find . -maxdepth 1 -type d -name 'openwrt-sdk-*') >> $GITHUB_ENV
          echo "Using SDK dir: $SDK_DIR"

      # ---------- CACHES ----------
      - name: Cache OpenWrt dl/
        uses: actions/cache@v4
        with:
          path: ${{ env.SDK_DIR }}/dl
          key: dl-${{ matrix.sdk.name }}-24x

      - name: Cache Cargo registry/git
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: cargo-${{ matrix.sdk.name }}-24x-${{ hashFiles('package/**/Makefile') }}

      - name: Cache sccache (Rust)
        uses: actions/cache@v4
        with:
          path: ~/.cache/sccache
          key: sccache-${{ matrix.sdk.name }}-24x-${{ hashFiles('package/**/Makefile') }}

      - name: Prepare feeds (minimal)
        working-directory: ${{ env.SDK_DIR }}
        run: |
          ./scripts/feeds update -a
          # hanya yang dibutuhkan buat spotifyd (Rust)
          ./scripts/feeds install rust cargo alsa-lib openssl

      - name: Copy spotifyd package into SDK
        run: |
          mkdir -p "${{ env.SDK_DIR }}/package/sound"
          rsync -a package/sound/spotifyd-ng "${{ env.SDK_DIR }}/package/sound/"

      - name: Build spotifyd (fast)
        working-directory: ${{ env.SDK_DIR }}
        env:
          FORCE_UNSAFE_CONFIGURE: 1
          RUSTC_WRAPPER: sccache
          SCCACHE_DIR: ${{ runner.temp }}/.sccache
          CARGO_HOME: ~/.cargo
          RUSTFLAGS: -C debuginfo=0
        run: |
          make defconfig
          make package/spotifyd-ng/compile V=sc
          mkdir -p ../out/${{ matrix.sdk.name }}
          find bin -name "*spotifyd-ng*_*.ipk" -exec cp {} ../out/${{ matrix.sdk.name }}/ \; || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openwrt24_${{ matrix.sdk.name }}_ipk
          path: out/${{ matrix.sdk.name }}/
          if-no-files-found: error
