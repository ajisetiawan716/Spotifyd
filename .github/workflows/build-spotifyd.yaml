name: Build spotifyd (patched) - autodetect SDK

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        sdk:
          - name: x86_64
            target_path: x86/64
            target_key: x86-64         # dipakai buat filter nama file
          - name: aarch64_generic
            target_path: mediatek/filogic
            target_key: mediatek-filogic

    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3 wget xz-utils git rsync pkg-config curl

      # === Cari SDK secara dinamis ===
      - name: Resolve SDK URL dynamically (24.x → snapshots → 23.05.5)
        id: sdkurl
        env:
          TARGET_PATH: ${{ matrix.sdk.target_path }}
          TARGET_KEY:  ${{ matrix.sdk.target_key }}
        run: |
          set -euo pipefail

          pick_from_dir () {
            local BASE="$1"           # base URL yg di-probing
            local KEY="$2"            # x86-64 / mediatek-filogic
            echo ">> probing $BASE" >&2
            # Ambil list nama file (tanpa asumsi HTML), lalu filter yg pasti SDK utk target itu
            local FILE
            FILE=$(curl -fsSL "$BASE" \
              | grep -oE "openwrt-sdk-[^\"[:space:]]*-${KEY}_[^\"[:space:]]*\.tar\.xz" \
              | head -n1 || true)
            if [ -n "${FILE:-}" ]; then
              echo "${BASE}${FILE}"
              return 0
            fi
            return 1
          }

          URL=""
          # 1) coba releases 24.x (beberapa kemungkinan patch version)
          for REL in 24.10.0 24.10 24.07.0 24.07; do
            BASE="https://downloads.openwrt.org/releases/${REL}/targets/${TARGET_PATH}/"
            if URL="$(pick_from_dir "$BASE" "$TARGET_KEY")"; then
              echo "Found in releases ${REL}" >&2
              break
            fi
          done

          # 2) fallback snapshots
          if [ -z "$URL" ]; then
            BASE="https://downloads.openwrt.org/snapshots/targets/${TARGET_PATH}/"
            if URL="$(pick_from_dir "$BASE" "$TARGET_KEY")"; then
              echo "Found in snapshots" >&2
            fi
          fi

          # 3) fallback stabil terakhir 23.05.5
          if [ -z "$URL" ]; then
            BASE="https://downloads.openwrt.org/releases/23.05.5/targets/${TARGET_PATH}/"
            if URL="$(pick_from_dir "$BASE" "$TARGET_KEY")"; then
              echo "FALLBACK to 23.05.5" >&2
            fi
          fi

          if [ -z "$URL" ]; then
            echo "ERROR: No SDK tarball found for target ${TARGET_PATH}" >&2
            exit 1
          fi

          echo "url=$URL" >> "$GITHUB_OUTPUT"

      - name: Download & extract OpenWrt SDK
        run: |
          wget -q "${{ steps.sdkurl.outputs.url }}" -O sdk.tar.xz
          tar xf sdk.tar.xz
          echo SDK_DIR=$(find . -maxdepth 1 -type d -name 'openwrt-sdk-*') >> $GITHUB_ENV
          echo "Using SDK dir: $SDK_DIR"

      # ---------- CACHES ----------
      - name: Cache OpenWrt dl/
        uses: actions/cache@v4
        with:
          path: ${{ env.SDK_DIR }}/dl
          key: dl-${{ matrix.sdk.name }}-auto

      - name: Cache Cargo registry/git
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: cargo-${{ matrix.sdk.name }}-auto-${{ hashFiles('package/**/Makefile') }}

      - name: Cache sccache (Rust)
        uses: actions/cache@v4
        with:
          path: ~/.cache/sccache
          key: sccache-${{ matrix.sdk.name }}-auto-${{ hashFiles('package/**/Makefile') }}

      - name: Prepare feeds (minimal)
        working-directory: ${{ env.SDK_DIR }}
        run: |
          ./scripts/feeds update -a
          # install hanya dep build yg dibutuhkan spotifyd (Rust + libs)
          ./scripts/feeds install rust cargo alsa-lib openssl

      - name: Copy spotifyd package into SDK
        run: |
          mkdir -p "${{ env.SDK_DIR }}/package/sound"
          rsync -a package/sound/spotifyd-ng "${{ env.SDK_DIR }}/package/sound/"

      - name: Build spotifyd (fast)
        working-directory: ${{ env.SDK_DIR }}
        env:
          FORCE_UNSAFE_CONFIGURE: 1
          RUSTC_WRAPPER: sccache
          SCCACHE_DIR: ${{ runner.temp }}/.sccache
          CARGO_HOME: ~/.cargo
          RUSTFLAGS: -C debuginfo=0
        run: |
          make defconfig
          make package/spotifyd-ng/compile V=sc
          mkdir -p ../out/${{ matrix.sdk.name }}
          find bin -name "*spotifyd-ng*_*.ipk" -exec cp {} ../out/${{ matrix.sdk.name }}/ \; || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openwrt_${{ matrix.sdk.name }}_ipk
          path: out/${{ matrix.sdk.name }}/
          if-no-files-found: error
