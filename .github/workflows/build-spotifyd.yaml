name: build-spotifyd-openwrt

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'package/**'
      - '.github/workflows/build-spotifyd.yaml'

jobs:
  build:
    name: build (${{ matrix.target }})
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64
            pretty: x86-64
            sdk: https://downloads.openwrt.org/releases/23.05.5/targets/x86/64/openwrt-sdk-23.05.5-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz

    env:
      TERM: dumb
      DEBIAN_FRONTEND: noninteractive
      KCONFIG_NONINTERACTIVE: 1
      FORCE_UNSAFE_CONFIGURE: 1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: 'main-repo'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            git curl wget \
            xz-utils tar \
            python3 python3-distutils \
            libncurses-dev \
            unzip rsync \
            gawk gettext

      - name: Download OpenWrt SDK
        run: |
          set -eux
          echo "Downloading SDK for ${{ matrix.target }}..."
          curl -fsSL "${{ matrix.sdk }}" -o sdk.tar.xz
          tar -xf sdk.tar.xz
          SDK_DIR=$(echo openwrt-sdk-*)
          echo "SDK_DIR=$SDK_DIR" >> $GITHUB_ENV
          echo "STAGING_DIR=$GITHUB_WORKSPACE/$SDK_DIR/staging_dir" >> $GITHUB_ENV
          echo "SDK downloaded and extracted: $SDK_DIR"

      - name: Prepare SDK environment
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          export TERM=dumb
          export KCONFIG_NONINTERACTIVE=1
          
          echo "Creating prerequisite directories..."
          mkdir -p host/.prereq-build
          touch host/.prereq-build
          echo "Prerequisite setup completed"

      - name: Setup package feeds
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          export TERM=dumb
          export KCONFIG_NONINTERACTIVE=1
          
          echo "Updating feeds..."
          ./scripts/feeds update -a
          
          echo "Installing ONLY required dependencies..."
          ./scripts/feeds install rust
          ./scripts/feeds install alsa-lib
          ./scripts/feeds install libstdcpp
          ./scripts/feeds install libpthread

      - name: Setup local feed
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          export TERM=dumb
          export KCONFIG_NONINTERACTIVE=1
          
          echo "Setting up local feed..."
          echo "src-link local $GITHUB_WORKSPACE/main-repo/package" >> feeds.conf.default
          ./scripts/feeds update local
          ./scripts/feeds install -p local spotifyd-ng

      - name: Fix Rust LLVM download issue
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          echo "=== FIXING RUST LLVM DOWNLOAD ISSUE ==="
          
          # Tambahkan config untuk disable download-ci-llvm
          for config_file in $(find feeds/packages/lang/rust -name "config.toml" 2>/dev/null || true); do
            echo "Fixing $config_file"
            if grep -q "download-ci-llvm" "$config_file"; then
              sed -i 's/^download-ci-llvm = .*/download-ci-llvm = false/' "$config_file"
            else
              echo '[llvm]' >> "$config_file"
              echo 'download-ci-llvm = false' >> "$config_file"
            fi
            echo "✅ Fixed $config_file"
          done
          
          # Jika tidak ada config file, buat yang baru
          if [ ! -f "feeds/packages/lang/rust/config.toml" ]; then
            mkdir -p feeds/packages/lang/rust
            echo '[llvm]' > feeds/packages/lang/rust/config.toml
            echo 'download-ci-llvm = false' >> feeds/packages/lang/rust/config.toml
            echo "✅ Created new config.toml"
          fi
          
          echo "✅ LLVM download fix applied"

      - name: Configure SDK
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          export TERM=dumb
          export KCONFIG_NONINTERACTIVE=1
          
          echo "=== CONFIGURATION ==="
          make defconfig
          
          echo "CONFIG_PACKAGE_rust=y" >> .config
          echo "CONFIG_PACKAGE_alsa-lib=y" >> .config
          echo "CONFIG_PACKAGE_libstdcpp=y" >> .config
          echo "CONFIG_PACKAGE_libpthread=y" >> .config
          echo "CONFIG_PACKAGE_spotifyd-ng=y" >> .config
          
          make defconfig
          
          echo "=== CONFIG STATUS ==="
          for pkg in rust alsa-lib libstdcpp libpthread spotifyd-ng; do
            if grep -q "CONFIG_PACKAGE_${pkg}=y" .config; then
              echo "✅ $pkg: ENABLED"
            else
              echo "❌ $pkg: MISSING"
              exit 1
            fi
          done

      - name: Build spotifyd-ng package
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          export TERM=dumb
          export KCONFIG_NONINTERACTIVE=1
          
          echo "=== BUILDING SPOTIFYD-NG ==="
          echo "This may take a while (Rust needs to compile first)..."
          
          # Build dengan timeout yang lebih panjang
          timeout 1800 make package/feeds/local/spotifyd-ng/compile V=s || \
          if [ $? -eq 124 ]; then 
            echo "Build timed out after 30 minutes, but may still be successful"; 
          else 
            exit $?; 
          fi

      - name: Collect artifacts
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          mkdir -p "$GITHUB_WORKSPACE/out/${{ matrix.target }}"
          find . -name "*spotifyd-ng*.ipk" -exec cp -v {} "$GITHUB_WORKSPACE/out/${{ matrix.target }}/" \;
          ls -la "$GITHUB_WORKSPACE/out/${{ matrix.target }}/" || echo "No artifacts found"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: spotifyd-${{ matrix.target }}-ipk
          path: out/${{ matrix.target }}/
          if-no-files-found: warn

      - name: Debug info if failed
        if: failure()
        working-directory: ${{ env.SDK_DIR }}
        run: |
          echo "=== DEBUG INFO ==="
          echo "Rust config files:"
          find . -name "*config.toml" -exec echo "=== {} ===" \; -exec cat {} \; 2>/dev/null || true
          echo "Build logs:"
          find . -name "*.log" -exec echo "=== {} ===" \; -exec tail -20 {} \; 2>/dev/null | head -100