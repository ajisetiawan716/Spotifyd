name: build-spotifyd-openwrt

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'package/**'
      - '.github/workflows/build-spotifyd.yaml'

jobs:
  build:
    name: build (${{ matrix.target }})
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64
            pretty: x86-64
            sdk: https://downloads.openwrt.org/releases/23.05.5/targets/x86/64/openwrt-sdk-23.05.5-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz
          - target: aarch64_generic
            pretty: mediatek-filogic
            sdk: https://downloads.openwrt.org/releases/23.05.5/targets/mediatek/filogic/openwrt-sdk-23.05.5-mediatek-filogic_gcc-12.3.0_musl.Linux-x86_64.tar.xz

    env:
      TERM: dumb
      DEBIAN_FRONTEND: noninteractive
      KCONFIG_NONINTERACTIVE: 1
      FORCE_UNSAFE_CONFIGURE: 1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            git curl wget \
            xz-utils tar \
            python3 python3-distutils \
            libncurses-dev \
            unzip rsync \
            gawk gettext

      - name: Download OpenWrt SDK
        run: |
          set -eux
          echo "Downloading SDK for ${{ matrix.target }}..."
          curl -fsSL "${{ matrix.sdk }}" -o sdk.tar.xz
          tar -xf sdk.tar.xz
          SDK_DIR=$(echo openwrt-sdk-*)
          echo "SDK_DIR=$SDK_DIR" >> $GITHUB_ENV
          echo "STAGING_DIR=$GITHUB_WORKSPACE/$SDK_DIR/staging_dir" >> $GITHUB_ENV

      - name: Prepare SDK environment
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          export TERM=dumb
          export KCONFIG_NONINTERACTIVE=1
          
          echo "Creating prerequisite directories..."
          mkdir -p host/.prereq-build
          touch host/.prereq-build
          echo "Prerequisite setup completed"

      - name: Setup package feeds
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          export TERM=dumb
          export KCONFIG_NONINTERACTIVE=1
          
          echo "Updating feeds..."
          ./scripts/feeds update -a
          
          echo "Installing package dependencies..."
          ./scripts/feeds install -a -p packages
          ./scripts/feeds install rust
          ./scripts/feeds install alsa-lib
          ./scripts/feeds install libstdcpp
          ./scripts/feeds install libpthread
          echo "Package dependencies installed"

      - name: Setup local feed
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          export TERM=dumb
          export KCONFIG_NONINTERACTIVE=1
          
          echo "Setting up local feed..."
          echo "src-link local $GITHUB_WORKSPACE/package" >> feeds.conf.default
          ./scripts/feeds update local
          ./scripts/feeds install -a -p local
          echo "Local feed setup completed"

      - name: Configure SDK dengan verification kuat
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          export TERM=dumb
          export KCONFIG_NONINTERACTIVE=1
          
          echo "Step 1: Initial defconfig"
          make defconfig
          
          echo "Step 2: Verify .config exists"
          if [ ! -f .config ]; then
            echo "ERROR: .config file not found after defconfig!"
            echo "Directory contents:"
            ls -la
            exit 1
          fi
          
          echo "Step 3: Enabling required packages..."
          # List packages to enable
          PACKAGES="rust spotifyd-ng alsa-lib libstdcpp libpthread"
          
          for pkg in $PACKAGES; do
            echo "Enabling package: $pkg"
            if grep -q "# CONFIG_PACKAGE_${pkg} is not set" .config; then
              sed -i "s/# CONFIG_PACKAGE_${pkg} is not set/CONFIG_PACKAGE_${pkg}=y/" .config
              echo "Enabled $pkg via sed"
            elif ! grep -q "CONFIG_PACKAGE_${pkg}=y" .config; then
              echo "CONFIG_PACKAGE_${pkg}=y" >> .config
              echo "Added $pkg to config"
            else
              echo "$pkg already enabled"
            fi
          done
          
          echo "Step 4: Final defconfig"
          make defconfig
          
          echo "Step 5: Final verification"
          echo "=== CONFIG STATUS ==="
          for pkg in $PACKAGES; do
            if grep -q "CONFIG_PACKAGE_${pkg}=y" .config; then
              echo "✅ CONFIG_PACKAGE_${pkg}=y"
            else
              echo "❌ CONFIG_PACKAGE_${pkg} NOT ENABLED!"
              echo "Current config for $pkg:"
              grep "CONFIG_PACKAGE_${pkg}" .config || echo "Not found"
              exit 1
            fi
          done
          
          echo "✅ All required packages enabled successfully"

      - name: Build spotifyd-ng package
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          export TERM=dumb
          export KCONFIG_NONINTERACTIVE=1
          
          echo "Starting build process..."
          make package/feeds/local/spotifyd-ng/compile V=s
          echo "Build process completed"

      - name: Collect artifacts
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          echo "Collecting build artifacts..."
          mkdir -p "$GITHUB_WORKSPACE/out/${{ matrix.target }}"
          
          # Find and copy IPK files
          find bin -name "*spotifyd-ng*.ipk" -exec cp -v {} "$GITHUB_WORKSPACE/out/${{ matrix.target }}/" \;
          
          # Check if any files were found
          if [ -z "$(ls -A "$GITHUB_WORKSPACE/out/${{ matrix.target }}")" ]; then
            echo "Warning: No IPK files found in bin directory"
            echo "Searching in other directories..."
            find . -name "*spotifyd-ng*.ipk" -exec cp -v {} "$GITHUB_WORKSPACE/out/${{ matrix.target }}/" \;
          fi
          
          echo "Artifacts collected:"
          ls -la "$GITHUB_WORKSPACE/out/${{ matrix.target }}/" || echo "No artifacts found"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: spotifyd-${{ matrix.target }}-ipk
          path: out/${{ matrix.target }}/
          if-no-files-found: warn

      - name: Debug info if failed
        if: failure()
        working-directory: ${{ env.SDK_DIR }}
        run: |
          echo "=== DETAILED DEBUG INFO ==="
          echo "Current directory: $(pwd)"
          echo "Directory structure:"
          ls -la
          
          echo "=== .CONFIG STATUS ==="
          if [ -f .config ]; then
            echo "Config file exists"
            echo "Rust config: $(grep 'CONFIG_PACKAGE_rust' .config || echo 'NOT FOUND')"
            echo "spotifyd-ng config: $(grep 'CONFIG_PACKAGE_spotifyd-ng' .config || echo 'NOT FOUND')"
            echo "First 10 lines of .config:"
            head -10 .config
          else
            echo "ERROR: .config file does not exist!"
            echo "Creating test config to verify permissions..."
            touch test_config.txt
            ls -la test_config.txt
            rm -f test_config.txt
          fi
          
          echo "=== FEEDS STATUS ==="
          echo "Local feeds:"
          ls -la feeds/local/ 2>/dev/null || echo "No local feeds directory"
          
          echo "Package feeds:"
          ls -la feeds/packages/ 2>/dev/null || echo "No packages feeds directory"
          
          echo "=== RUST PACKAGE STATUS ==="
          echo "Rust package files:"
          find feeds/packages/lang/rust -name "*" 2>/dev/null || echo "Rust package not found"
          
          echo "=== SDK TOOLCHAIN ==="
          echo "Toolchain directory:"
          ls -la staging_dir/toolchain/ 2>/dev/null || echo "No toolchain directory"
          
          echo "=== DISK SPACE ==="
          df -h
          echo "=== MEMORY INFO ==="
          free -h