name: build-spotifyd-optimized

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'package/**'
      - '.github/workflows/build-spotifyd.yaml'

jobs:
  build:
    name: build (${{ matrix.target }} | ${{ matrix.pretty }})
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64
            pretty: x86-64
            rust_target: x86_64-unknown-linux-musl
            sdk: https://downloads.openwrt.org/releases/23.05.5/targets/x86/64/openwrt-sdk-23.05.5-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz
          - target: aarch64_generic
            pretty: mediatek-filogic
            rust_target: aarch64-unknown-linux-musl
            sdk: https://downloads.openwrt.org/releases/23.05.5/targets/mediatek/filogic/openwrt-sdk-23.05.5-mediatek-filogic_gcc-12.3.0_musl.Linux-x86_64.tar.xz

    env:
      TERM: xterm
      KCONFIG_NONINTERACTIVE: 1
      MAKEFLAGS: -j$(nproc)
      FORCE_UNSAFE_CONFIGURE: 1
      RUSTFLAGS: -C debuginfo=0

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential gcc make cmake \
            git curl ca-certificates xz-utils \
            python3 pkg-config unzip

      - name: Install Rust (untuk persiapan)
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Download & extract SDK
        run: |
          set -eux
          curl -fsSL "${{ matrix.sdk }}" -o sdk.tar.xz
          tar -xJf sdk.tar.xz
          echo "SDK_DIR=$(echo openwrt-sdk-*)" >> $GITHUB_ENV
          echo "STAGING_DIR=${{ github.workspace }}/$(echo openwrt-sdk-*)/staging_dir" >> $GITHUB_ENV

      - name: Setup environment variables
        run: |
          echo "PATH=${{ env.STAGING_DIR }}/toolchain/bin:$PATH" >> $GITHUB_ENV
          echo "CC=${{ env.STAGING_DIR }}/toolchain/bin/$(if [ '${{ matrix.target }}' = 'x86_64' ]; then echo 'x86_64-openwrt-linux-musl-gcc'; else echo 'aarch64-openwrt-linux-musl-gcc'; fi)" >> $GITHUB_ENV
          echo "CXX=${{ env.STAGING_DIR }}/toolchain/bin/$(if [ '${{ matrix.target }}' = 'x86_64' ]; then echo 'x86_64-openwrt-linux-musl-g++'; else echo 'aarch64-openwrt-linux-musl-g++'; fi)" >> $GITHUB_ENV
          echo "AR=${{ env.STAGING_DIR }}/toolchain/bin/$(if [ '${{ matrix.target }}' = 'x86_64' ]; then echo 'x86_64-openwrt-linux-musl-ar'; else echo 'aarch64-openwrt-linux-musl-ar'; fi)" >> $GITHUB_ENV
          echo "STRIP=${{ env.STAGING_DIR }}/toolchain/bin/$(if [ '${{ matrix.target }}' = 'x86_64' ]; then echo 'x86_64-openwrt-linux-musl-strip'; else echo 'aarch64-openwrt-linux-musl-strip'; fi)" >> $GITHUB_ENV

      - name: Build spotifyd menggunakan cargo langsung
        run: |
          set -eux
          git clone https://github.com/Spotifyd/spotifyd.git spotifyd-source
          cd spotifyd-source
          git checkout v0.4.1
          
          # Apply patch untuk librespot
          echo '[patch.crates-io]' >> Cargo.toml
          echo 'librespot = { git = "https://github.com/librespot-org/librespot.git", rev = "be37402" }' >> Cargo.toml
          
          # Setup cargo config untuk menggunakan toolchain OpenWrt
          mkdir -p .cargo
          if [ "${{ matrix.target }}" = "x86_64" ]; then
            cat > .cargo/config.toml << 'EOF'
[target.x86_64-unknown-linux-musl]
linker = "${{ env.STAGING_DIR }}/toolchain/bin/x86_64-openwrt-linux-musl-gcc"
ar = "${{ env.STAGING_DIR }}/toolchain/bin/x86_64-openwrt-linux-musl-ar"
EOF
          else
            cat > .cargo/config.toml << 'EOF'
[target.aarch64-unknown-linux-musl]
linker = "${{ env.STAGING_DIR }}/toolchain/bin/aarch64-openwrt-linux-musl-gcc"
ar = "${{ env.STAGING_DIR }}/toolchain/bin/aarch64-openwrt-linux-musl-ar"
EOF
          fi
          
          # Set environment variables untuk build
          export CARGO_TARGET_$(echo ${{ matrix.rust_target }} | tr 'a-z-' 'A-Z_')_LINKER="${{ env.STAGING_DIR }}/toolchain/bin/$(if [ '${{ matrix.target }}' = 'x86_64' ]; then echo 'x86_64-openwrt-linux-musl-gcc'; else echo 'aarch64-openwrt-linux-musl-gcc'; fi)"
          export CARGO_TARGET_$(echo ${{ matrix.rust_target }} | tr 'a-z-' 'A-Z_')_AR="${{ env.STAGING_DIR }}/toolchain/bin/$(if [ '${{ matrix.target }}' = 'x86_64' ]; then echo 'x86_64-openwrt-linux-musl-ar'; else echo 'aarch64-openwrt-linux-musl-ar'; fi)"
          
          # Build dengan cargo
          cargo build --release --no-default-features --features alsa_backend --target ${{ matrix.rust_target }}
          
          # Salin binary
          mkdir -p "$GITHUB_WORKSPACE/binaries"
          cp target/${{ matrix.rust_target }}/release/spotifyd "$GITHUB_WORKSPACE/binaries/spotifyd-${{ matrix.target }}"

      - name: Create IPK package structure
        run: |
          set -eux
          mkdir -p "$GITHUB_WORKSPACE/ipk/spotifyd-ng/CONTROL"
          mkdir -p "$GITHUB_WORKSPACE/ipk/spotifyd-ng/usr/bin"
          
          # Copy binary
          cp "$GITHUB_WORKSPACE/binaries/spotifyd-${{ matrix.target }}" "$GITHUB_WORKSPACE/ipk/spotifyd-ng/usr/bin/spotifyd"
          chmod +x "$GITHUB_WORKSPACE/ipk/spotifyd-ng/usr/bin/spotifyd"

      - name: Prepare OpenWrt package metadata
        working-directory: ${{ env.SDK_DIR }}
        run: |
          # Gunakan SDK untuk generate metadata yang proper
          ./scripts/feeds update packages
          ./scripts/feeds install -a -p packages
          echo "src-link local $GITHUB_WORKSPACE/package" >> feeds.conf.default
          ./scripts/feeds update local
          ./scripts/feeds install -a -p local

      - name: Build IPK package using SDK
        working-directory: ${{ env.SDK_DIR }}
        run: |
          # Build package menggunakan SDK OpenWrt
          make package/spotifyd-ng/compile V=sc
          
          # Copy hasil build
          mkdir -p "$GITHUB_WORKSPACE/out/${{ matrix.target }}"
          find bin/packages -name "*spotifyd-ng*.ipk" -exec cp {} "$GITHUB_WORKSPACE/out/${{ matrix.target }}/" \;

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: spotifyd-${{ matrix.target }}-ipk
          path: out/${{ matrix.target }}/
          if-no-files-found: error