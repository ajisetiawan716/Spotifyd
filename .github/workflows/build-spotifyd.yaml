name: build-spotifyd-openwrt

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'package/**'
      - '.github/workflows/build-spotifyd.yaml'

jobs:
  build:
    name: build (${{ matrix.target }})
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64
            pretty: x86-64
            sdk: https://downloads.openwrt.org/releases/23.05.5/targets/x86/64/openwrt-sdk-23.05.5-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz
          - target: aarch64_generic
            pretty: mediatek-filogic
            sdk: https://downloads.openwrt.org/releases/23.05.5/targets/mediatek/filogic/openwrt-sdk-23.05.5-mediatek-filogic_gcc-12.3.0_musl.Linux-x86_64.tar.xz

    env:
      TERM: dumb
      DEBIAN_FRONTEND: noninteractive
      KCONFIG_NONINTERACTIVE: 1
      FORCE_UNSAFE_CONFIGURE: 1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            git curl wget \
            xz-utils tar \
            python3 python3-distutils \
            libncurses-dev \
            unzip rsync \
            gawk gettext

      - name: Download OpenWrt SDK
        run: |
          set -eux
          echo "Downloading SDK for ${{ matrix.target }}..."
          curl -fsSL "${{ matrix.sdk }}" -o sdk.tar.xz
          tar -xf sdk.tar.xz
          SDK_DIR=$(echo openwrt-sdk-*)
          echo "SDK_DIR=$SDK_DIR" >> $GITHUB_ENV
          echo "STAGING_DIR=$GITHUB_WORKSPACE/$SDK_DIR/staging_dir" >> $GITHUB_ENV
          echo "SDK downloaded and extracted: $SDK_DIR"

      - name: Prepare SDK environment
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          export TERM=dumb
          export KCONFIG_NONINTERACTIVE=1
          
          echo "Creating prerequisite directories..."
          mkdir -p host/.prereq-build
          touch host/.prereq-build
          echo "Prerequisite setup completed"
          echo "Directory structure:"
          ls -la host/

      - name: Setup package feeds
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          export TERM=dumb
          export KCONFIG_NONINTERACTIVE=1
          
          echo "=== FEEDS SETUP DEBUG ==="
          echo "Current feeds.conf.default:"
          cat feeds.conf.default || echo "No feeds.conf.default yet"
          
          echo "Updating feeds..."
          ./scripts/feeds update -a
          
          echo "Feeds update completed. Available feeds:"
          ./scripts/feeds list | head -10 || echo "Cannot list feeds"
          
          echo "Installing package dependencies..."
          ./scripts/feeds install -a -p packages
          ./scripts/feeds install rust
          ./scripts/feeds install alsa-lib
          ./scripts/feeds install libstdcpp
          ./scripts/feeds install libpthread
          
          echo "Package dependencies installed. Checking Rust:"
          ./scripts/feeds list | grep rust || echo "Rust not found in feeds"
          echo "Package dependencies setup completed"

      - name: Setup local feed
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          export TERM=dumb
          export KCONFIG_NONINTERACTIVE=1
          
          echo "=== LOCAL FEED SETUP DEBUG ==="
          echo "Setting up local feed..."
          echo "src-link local $GITHUB_WORKSPACE/package" >> feeds.conf.default
          
          echo "Updated feeds.conf.default:"
          cat feeds.conf.default
          
          ./scripts/feeds update local
          echo "Local feed updated"
          
          ./scripts/feeds install -a -p local
          echo "Local packages installed"
          
          echo "Checking if spotifyd-ng is available:"
          ./scripts/feeds list | grep spotifyd || echo "spotifyd-ng not found in feeds list"
          echo "Local feed setup completed"

      - name: Configure SDK untuk custom package
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          export TERM=dumb
          export KCONFIG_NONINTERACTIVE=1
          
          echo "=== CONFIGURATION DEBUG ==="
          echo "Step 1: Initial configuration"
          make defconfig
          
          echo "Step 2: Verify .config exists"
          if [ ! -f .config ]; then
            echo "ERROR: .config file not found after defconfig!"
            echo "Directory contents:"
            ls -la
            exit 1
          fi
          
          echo "Initial .config size: $(wc -l < .config) lines"
          echo "First 5 lines of .config:"
          head -5 .config
          
          echo "Step 3: Enable standard dependencies"
          STANDARD_DEPS="rust alsa-lib libstdcpp libpthread"
          
          for pkg in $STANDARD_DEPS; do
            echo "Processing package: $pkg"
            if grep -q "# CONFIG_PACKAGE_${pkg} is not set" .config; then
              sed -i "s/# CONFIG_PACKAGE_${pkg} is not set/CONFIG_PACKAGE_${pkg}=y/" .config
              echo "✅ Enabled $pkg via sed"
            elif grep -q "CONFIG_PACKAGE_${pkg}=y" .config; then
              echo "ℹ️ $pkg already enabled"
            else
              echo "CONFIG_PACKAGE_${pkg}=y" >> .config
              echo "✅ Added $pkg to config"
            fi
          done
          
          echo "Step 4: Finalize configuration"
          make defconfig
          
          echo "Step 5: Verify dependencies"
          echo "=== FINAL CONFIG STATUS ==="
          echo ".config size: $(wc -l < .config) lines"
          
          for pkg in $STANDARD_DEPS; do
            if grep -q "CONFIG_PACKAGE_${pkg}=y" .config; then
              echo "✅ $pkg: ENABLED"
            else
              echo "❌ $pkg: MISSING - $(grep CONFIG_PACKAGE_${pkg} .config || echo 'NOT FOUND')"
              exit 1
            fi
          done
          
          echo "✅ All dependencies enabled successfully"
          echo "ℹ️ Custom package spotifyd-ng will be built automatically from local feed"

      - name: Build spotifyd-ng package
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          export TERM=dumb
          export KCONFIG_NONINTERACTIVE=1
          
          echo "=== BUILD DEBUG ==="
          echo "Building spotifyd-ng from local feed..."
          echo "Current directory: $(pwd)"
          echo "Local feed contents:"
          ls -la feeds/local/ || echo "No local feeds directory"
          
          echo "Package directory exists:"
          find . -name "*spotifyd*" -type d || echo "No spotifyd directory found"
          
          echo "Starting build process..."
          make package/feeds/local/spotifyd-ng/compile V=s

      - name: Collect artifacts
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -eux
          echo "=== ARTIFACTS COLLECTION DEBUG ==="
          echo "Collecting build artifacts..."
          mkdir -p "$GITHUB_WORKSPACE/out/${{ matrix.target }}"
          
          echo "Searching for IPK files in bin directory:"
          find bin -name "*.ipk" | head -5 || echo "No IPK files found in bin"
          
          echo "Searching for spotifyd IPK files:"
          find bin -name "*spotifyd-ng*.ipk" -exec cp -v {} "$GITHUB_WORKSPACE/out/${{ matrix.target }}/" \;
          
          echo "Searching in all directories:"
          find . -name "*spotifyd-ng*.ipk" -exec cp -v {} "$GITHUB_WORKSPACE/out/${{ matrix.target }}/" \;
          
          echo "Artifacts collected:"
          ls -la "$GITHUB_WORKSPACE/out/${{ matrix.target }}/" || echo "No artifacts found"
          
          echo "Build directory contents:"
          ls -la bin/ 2>/dev/null || echo "No bin directory"
          ls -la bin/packages/ 2>/dev/null || echo "No packages directory"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: spotifyd-${{ matrix.target }}-ipk
          path: out/${{ matrix.target }}/
          if-no-files-found: warn

      - name: Debug info if failed
        if: failure()
        working-directory: ${{ env.SDK_DIR }}
        run: |
          echo "=== DETAILED DEBUG INFO AFTER FAILURE ==="
          echo "Current directory: $(pwd)"
          
          echo "=== DIRECTORY STRUCTURE ==="
          ls -la
          echo "--- feeds/ ---"
          ls -la feeds/ 2>/dev/null || echo "No feeds directory"
          echo "--- feeds/local/ ---"
          ls -la feeds/local/ 2>/dev/null || echo "No local feeds"
          echo "--- package/ ---"
          ls -la package/ 2>/dev/null || echo "No package directory"
          
          echo "=== CONFIG FILES ==="
          echo "--- .config ---"
          cat .config 2>/dev/null | head -20 || echo "No .config file"
          echo "--- feeds.conf.default ---"
          cat feeds.conf.default 2>/dev/null || echo "No feeds.conf.default"
          
          echo "=== PACKAGE INFO ==="
          echo "--- spotifyd-ng package ---"
          find . -name "*spotifyd*" -type f 2>/dev/null || echo "No spotifyd files found"
          echo "--- Makefile contents ---"
          find feeds/local/ -name "Makefile" -exec cat {} \; 2>/dev/null || echo "No Makefile found"
          
          echo "=== RUST PACKAGE STATUS ==="
          echo "--- Rust in feeds ---"
          find feeds/packages/lang/rust -name "*" 2>/dev/null || echo "Rust package not found"
          echo "--- Rust config ---"
          grep "CONFIG_PACKAGE_rust" .config 2>/dev/null || echo "Rust config not found"
          
          echo "=== BUILD LOGS ==="
          echo "--- Recent files in build_dir ---"
          find build_dir/ -name "*.log" -exec tail -5 {} \; 2>/dev/null || echo "No build logs found"
          
          echo "=== SYSTEM INFO ==="
          echo "Disk space:"
          df -h
          echo "Memory:"
          free -h