name: build-spotifyd-optimized

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'package/**'
      - '.github/workflows/build-spotifyd.yaml'
      - '.github/cargo-config/*'

jobs:
  build:
    name: build (${{ matrix.target }})
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64
            rust_target: x86_64-unknown-linux-musl
            sdk: https://downloads.openwrt.org/releases/23.05.5/targets/x86/64/openwrt-sdk-23.05.5-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz
          - target: aarch64
            rust_target: aarch64-unknown-linux-musl
            sdk: https://downloads.openwrt.org/releases/23.05.5/targets/mediatek/filogic/openwrt-sdk-23.05.5-mediatek-filogic_gcc-12.3.0_musl.Linux-x86_64.tar.xz

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential gcc make cmake \
            git curl ca-certificates xz-utils \
            python3 pkg-config unzip

      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          rustup target add ${{ matrix.rust_target }}

      - name: Download & extract SDK
        run: |
          set -eux
          curl -fsSL "${{ matrix.sdk }}" -o sdk.tar.xz
          tar -xJf sdk.tar.xz
          echo "SDK_DIR=$(echo openwrt-sdk-*)" >> $GITHUB_ENV
          echo "STAGING_DIR=${{ github.workspace }}/$(echo openwrt-sdk-*)/staging_dir" >> $GITHUB_ENV

      - name: Setup environment variables
        run: |
          echo "PATH=${{ env.STAGING_DIR }}/toolchain/bin:$PATH" >> $GITHUB_ENV
          if [ "${{ matrix.target }}" = "x86_64" ]; then
            echo "CC=${{ env.STAGING_DIR }}/toolchain/bin/x86_64-openwrt-linux-musl-gcc" >> $GITHUB_ENV
            echo "AR=${{ env.STAGING_DIR }}/toolchain/bin/x86_64-openwrt-linux-musl-ar" >> $GITHUB_ENV
          else
            echo "CC=${{ env.STAGING_DIR }}/toolchain/bin/aarch64-openwrt-linux-musl-gcc" >> $GITHUB_ENV
            echo "AR=${{ env.STAGING_DIR }}/toolchain/bin/aarch64-openwrt-linux-musl-ar" >> $GITHUB_ENV
          fi

      - name: Build spotifyd dengan toolchain OpenWrt
        run: |
          set -eux
          git clone https://github.com/Spotifyd/spotifyd.git spotifyd-source
          cd spotifyd-source
          git checkout v0.4.1
          
          # Apply patch untuk librespot
          echo '[patch.crates-io]' >> Cargo.toml
          echo 'librespot = { git = "https://github.com/librespot-org/librespot.git", rev = "be37402" }' >> Cargo.toml
          
          # Copy config file yang sudah disiapkan
          mkdir -p .cargo
          if [ "${{ matrix.target }}" = "x86_64" ]; then
            cp "$GITHUB_WORKSPACE/.github/cargo-config/x86_64-config.toml" .cargo/config.toml
          else
            cp "$GITHUB_WORKSPACE/.github/cargo-config/aarch64-config.toml" .cargo/config.toml
          fi
          
          # Replace placeholder dengan path actual
          sed -i "s|\$STAGING_DIR|${{ env.STAGING_DIR }}|g" .cargo/config.toml
          
          # Set environment variables
          export CARGO_TARGET_$(echo ${{ matrix.rust_target }} | tr 'a-z-' 'A-Z_')_LINKER="${{ env.STAGING_DIR }}/toolchain/bin/$(if [ '${{ matrix.target }}' = 'x86_64' ]; then echo 'x86_64-openwrt-linux-musl-gcc'; else echo 'aarch64-openwrt-linux-musl-gcc'; fi)"
          export CARGO_TARGET_$(echo ${{ matrix.rust_target }} | tr 'a-z-' 'A-Z_')_AR="${{ env.STAGING_DIR }}/toolchain/bin/$(if [ '${{ matrix.target }}' = 'x86_64' ]; then echo 'x86_64-openwrt-linux-musl-ar'; else echo 'aarch64-openwrt-linux-musl-ar'; fi)"
          
          cargo build --release --no-default-features --features alsa_backend --target ${{ matrix.rust_target }}
          
          mkdir -p "$GITHUB_WORKSPACE/binaries"
          cp target/${{ matrix.rust_target }}/release/spotifyd "$GITHUB_WORKSPACE/binaries/spotifyd-${{ matrix.target }}"

      - name: Prepare control file
        run: |
          mkdir -p ipk/CONTROL
          echo "Package: spotifyd-ng" > ipk/CONTROL/control
          echo "Version: 0.4.1-1" >> ipk/CONTROL/control
          echo "Depends: libstdcpp, libpthread, alsa-lib" >> ipk/CONTROL/control
          echo "Source: https://github.com/Spotifyd/spotifyd" >> ipk/CONTROL/control
          echo "Section: sound" >> ipk/CONTROL/control
          echo "Category: Sound" >> ipk/CONTROL/control
          echo "Architecture: ${{ matrix.target }}" >> ipk/CONTROL/control
          echo "Description: Spotify daemon for OpenWrt" >> ipk/CONTROL/control

      - name: Create IPK package
        run: |
          set -eux
          mkdir -p ipk/usr/bin
          
          cp "$GITHUB_WORKSPACE/binaries/spotifyd-${{ matrix.target }}" ipk/usr/bin/spotifyd
          chmod +x ipk/usr/bin/spotifyd
          
          cd ipk
          tar -czf ../data.tar.gz ./
          cd CONTROL
          tar -czf ../control.tar.gz ./
          cd ..
          echo "2.0" > debian-binary
          mkdir -p "$GITHUB_WORKSPACE/out"
          tar -czf "$GITHUB_WORKSPACE/out/spotifyd-ng_0.4.1-1_${{ matrix.target }}.ipk" debian-binary control.tar.gz data.tar.gz

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: spotifyd-${{ matrix.target }}-ipk
          path: out/
          if-no-files-found: error