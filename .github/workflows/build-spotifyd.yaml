name: build-spotifyd-complete

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    name: build (${{ matrix.target }})
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - target: x86_64
            rust_target: x86_64-unknown-linux-musl
            musl_toolchain: musl-tools
            linker: x86_64-linux-musl-gcc
            ar: x86_64-linux-musl-ar
          - target: aarch64
            rust_target: aarch64-unknown-linux-musl
            musl_toolchain: gcc-aarch64-linux-gnu musl-tools
            linker: aarch64-linux-gnu-gcc
            ar: aarch64-linux-gnu-ar

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install complete musl toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            git curl ca-certificates \
            ${{ matrix.musl_toolchain }} \
            binutils-x86-64-linux-gnu \
            binutils-aarch64-linux-gnu \
            musl-dev

      - name: Install Rust and setup target
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          rustup target add ${{ matrix.rust_target }}
          
          # Setup cargo config dengan semua tools yang diperlukan
          mkdir -p $HOME/.cargo
          cat > $HOME/.cargo/config.toml << EOF
[target.${{ matrix.rust_target }}]
linker = "${{ matrix.linker }}"
ar = "${{ matrix.ar }}"
ranlib = "${${matrix.ar}/ar/ranlib}"
EOF

      - name: Build spotifyd dengan environment variables
        run: |
          git clone https://github.com/Spotifyd/spotifyd.git spotifyd-source
          cd spotifyd-source
          git checkout v0.4.1
          
          echo '[patch.crates-io]' >> Cargo.toml
          echo 'librespot = { git = "https://github.com/librespot-org/librespot.git", rev = "be37402" }' >> Cargo.toml
          
          # Set semua environment variables yang diperlukan oleh ring crate
          export CC_$(echo ${{ matrix.rust_target }} | tr - _)=${{ matrix.linker }}
          export AR_$(echo ${{ matrix.rust_target }} | tr - _)=${{ matrix.ar }}
          export CARGO_TARGET_$(echo ${{ matrix.rust_target }} | tr 'a-z-' 'A-Z_')_LINKER=${{ matrix.linker }}
          export CARGO_TARGET_$(echo ${{ matrix.rust_target }} | tr 'a-z-' 'A-Z_')_AR=${{ matrix.ar }}
          
          # Build dengan verbose output untuk debug
          cargo build --release --no-default-features --features alsa_backend --target ${{ matrix.rust_target }} -v
          
          mkdir -p "$GITHUB_WORKSPACE/binaries"
          cp target/${{ matrix.rust_target }}/release/spotifyd "$GITHUB_WORKSPACE/binaries/spotifyd-${{ matrix.target }}"

      - name: Create IPK package
        run: |
          mkdir -p ipk/usr/bin ipk/CONTROL
          cp "$GITHUB_WORKSPACE/binaries/spotifyd-${{ matrix.target }}" ipk/usr/bin/spotifyd
          chmod +x ipk/usr/bin/spotifyd
          
          echo "Package: spotifyd-ng" > ipk/CONTROL/control
          echo "Version: 0.4.1-1" >> ipk/CONTROL/control
          echo "Depends: libstdcpp, libpthread, alsa-lib" >> ipk/CONTROL/control
          echo "Architecture: ${{ matrix.target }}" >> ipk/CONTROL/control
          echo "Description: Spotify daemon" >> ipk/CONTROL/control
          
          cd ipk
          tar -czf ../data.tar.gz ./
          cd CONTROL
          tar -czf ../control.tar.gz ./
          cd ..
          echo "2.0" > debian-binary
          mkdir -p "$GITHUB_WORKSPACE/out"
          tar -czf "$GITHUB_WORKSPACE/out/spotifyd-ng_0.4.1-1_${{ matrix.target }}.ipk" debian-binary control.tar.gz data.tar.gz

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: spotifyd-ipks
          path: out/